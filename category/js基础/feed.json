{
    "version": "https://jsonfeed.org/version/1",
    "title": "寂林的小窝 • All posts by \"js基础\" category",
    "description": "飒飒西风满院栽,蕊寒香冷蝶难来",
    "home_page_url": "https://jilinJL.github.io",
    "items": [
        {
            "id": "https://jilinjl.github.io/js/js-basic/JS%E5%9F%BA%E7%A1%80/",
            "url": "https://jilinjl.github.io/js/js-basic/JS%E5%9F%BA%E7%A1%80/",
            "title": "JS基础啦",
            "date_published": "2022-11-18T01:03:14.663Z",
            "content_html": "<h1 id=\"js基础和核心问题\"><a class=\"markdownIt-Anchor\" href=\"#js基础和核心问题\">#</a> JS 基础和核心问题</h1>\n<h3 id=\"判断数据类型\"><a class=\"markdownIt-Anchor\" href=\"#判断数据类型\">#</a> 判断数据类型</h3>\n<ol>\n<li>typeof 用于判断基本数据类型，引用数据类型和 null 都判为 object</li>\n<li>instanceof  判断实例对象的 prototype 如 a instanceof A  判断 a 是否由 A new 产生</li>\n<li>constructor 检测不出 undefined 和 null; 使用方法 str.constructor == String ； true</li>\n<li>toString.call (待测值)  toString 是 Object 原型对象的一个方法，根据原型链往上找 如函数 fn --&gt; fn._proto_(Fn.prototype) --&gt; Fn.prototype._proto_ (Object.prototype)</li>\n<li>jQuery 内置的方法</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5Cjilin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221113214240160.png\" alt=\"image-20221113214240160\"></p>\n<h3 id=\"浅拷贝vs深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝vs深拷贝\">#</a> 浅拷贝 vs 深拷贝</h3>\n<p><mark>浅拷贝</mark>只拷贝一层，实际上指向同一个地址；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [...oldArr]</span><br></pre></td></tr></table></figure>\n<p><mark>深拷贝</mark>拷贝全部，将数组内的对象也拷贝，开辟了新地址；</p>\n<p>// 四种深拷贝<br>\n 1. 递归         \t\t\t<br>\n2.Object.create()<br>\n 3.jQuery 的 $.extend<br>\n4. 导入 lodash 使用 cloneDeep</p>\n<h4 id=\"递归实现深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#递归实现深拷贝\">#</a> 递归实现深拷贝</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归实现深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldObj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;jilin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hobby</span>: [<span class=\"string\">&#x27;game&#x27;</span>,<span class=\"string\">&#x27;sleep&#x27;</span>,<span class=\"string\">&#x27;eat&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">skill</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;LOL&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">rank</span>: <span class=\"string\">&#x27;Gold II&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//let newObj = oldObj;</span></span><br><span class=\"line\"><span class=\"comment\">//oldObj.name = &#x27;123&#x27;  浅拷贝 修改原对象的值，新对象也变了</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(newObj); </span></span><br><span class=\"line\"><span class=\"comment\">//********以下为深拷贝***********</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">        newObj = &#123;&#125;;        <span class=\"comment\">//检测到为Object类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">            newObj[key] = <span class=\"title function_\">deepCopy</span>(object[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">        newObj = [];        <span class=\"comment\">//检测到为Array类型</span></span><br><span class=\"line\">        object.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            newObj = <span class=\"title function_\">deepCopy</span>(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newObj = object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNewObj = <span class=\"title function_\">deepCopy</span>(oldObj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myNewObj);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: &#x27;jilin&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  hobby: &#123; &#x27;0&#x27;: &#x27;game&#x27;, &#x27;1&#x27;: &#x27;sleep&#x27;, &#x27;2&#x27;: &#x27;eat&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  skill: &#123; name: &#x27;LOL&#x27;, rank: &#x27;Gold II&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h3>\n<p><strong>在函数内调用函数外部的变量，创建私有变量</strong></p>\n<ul>\n<li>\n<p>手写一个闭包，能记录函数调用的次数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`调用了<span class=\"subst\">$&#123;i&#125;</span>次`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了1次&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了2次&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了3次&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">null</span> <span class=\"comment\">//利用标记清除 回收内存</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>原理：</strong> 函数在作用找不到变量，顺着父级作用域往上找。 函数作用域只与创建时的位置有关，和调用时无关，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;全局变量a&quot;</span></span><br><span class=\"line\">fn1=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn2=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"string\">&quot;fn2中的a&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">fn1</span>()    <span class=\"comment\">//虽然调用位置在这里 但是创建的作用域 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>();  <span class=\"comment\">//&quot;全局变量a&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"完全理解-callapplybind\"><a class=\"markdownIt-Anchor\" href=\"#完全理解-callapplybind\">#</a> 完全理解 call (),apply (),bind ()</h3>\n<p><strong>三者都用于改变函数传参和 this 指向，注意 <em>箭头函数</em> 无法改变 this</strong></p>\n<p><code>fn.call('新的this对象','参数1','参数2','参数3'..)</code> <br>\n <code>fn.apply(''新的this对象',['参数1','参数2','参数3'])</code> <br>\n <code>fn.bind('新的this对象','参数1','参数2','参数3'..)() //bind返回的是一个新的函数,传参成为固定参数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">oldFn</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a+b</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum,<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123; <span class=\"attr\">name</span>:<span class=\"string\">&#x27;对象&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"title function_\">oldFn</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">oldFn.<span class=\"title function_\">call</span>(obj,<span class=\"number\">2</span>,<span class=\"number\">2</span>)  <span class=\"comment\">//this指向obj  传参2，2</span></span><br><span class=\"line\">oldFn.<span class=\"title function_\">apply</span>(obj,[<span class=\"number\">1</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//this指向obj 传参1，3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bindFn=oldFn.<span class=\"title function_\">bind</span>(obj,<span class=\"number\">0</span>,<span class=\"number\">4</span>) <span class=\"comment\">//this指向obj  绑定参数为0和4</span></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>() <span class=\"comment\">//相当于执行了o</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区\"><a class=\"markdownIt-Anchor\" href=\"#暂时性死区\">#</a> 暂时性死区</h3>\n<p>一句话：<strong>一进入当前作用域，变量就已经存在了，但不可获取，只有等到声明后才能获取和使用</strong>，作用是<strong>防止在变量声明前就使用，减少运行时的错误</strong></p>\n<p>var 存在变量提升，所以声明前访问，返回 undefined 而不报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>\t\t<span class=\"comment\">//变量提升</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)\t<span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>()\t<span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>()\t<span class=\"comment\">//ReferenceError</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript执行机制事件循环\"><a class=\"markdownIt-Anchor\" href=\"#javascript执行机制事件循环\">#</a> JavaScript 执行机制 —— 事件循环</h3>\n<h4 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步？</h4>\n<p>​\t<strong>JavaScript 是一门单线程语言，没有异步，一切异步都是以同步的方法模拟的！</strong></p>\n<h4 id=\"事件循环event-loop\"><a class=\"markdownIt-Anchor\" href=\"#事件循环event-loop\">#</a> 事件循环 Event Loop</h4>\n<p>​\t  event loop 它最主要是分三部分：<strong>主线程、宏队列（macrotask）、微队列（microtask）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 7 6 8 | 2 4 3 5 | 9 11 10 12</span></span><br><span class=\"line\">第一轮事件循环  第二轮     第三轮</span><br></pre></td></tr></table></figure>\n<p>** 宏任务（Macrotasks）：**js 同步执行的代码块，setTimeout、setInterval、XMLHttprequest、setImmediate、I/O、UI rendering 等。</p>\n<p>** 微任务（Microtasks）：**promise、process.nextTick（node 环境）、Object.observe, MutationObserver 等。</p>\n<blockquote>\n<p>浏览器在执行 js 代码过程中会维护一个<strong>执行栈</strong>，每个方法都会进栈执行之后然后出栈（FIFO）。与此同时，浏览器又维护了一个消息队列，所有的异步方法，在执行结束后都会将回调方法塞入<strong>消息队列</strong>中，当所有执行栈中的任务全部执行完毕后，浏览器开始往消息队列寻找任务，先进入消息队列的任务先执行。</p>\n</blockquote>\n<p><strong>执行完一次宏任务后，检查任务队列微任务，执行完后进入下一次宏任务执行</strong></p>\n<p><strong>宏任务和微任务的总结：</strong> 宏任务 Macrotasks 就是参与了事件循环的异步任务。 微任务 Microtasks 就是没有参与事件循环的 “异步” 任务。</p>\n<p><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/14/16fa17e343d9383f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"事件循环\"></p>\n<h4 id=\"node环境的js执行机制\"><a class=\"markdownIt-Anchor\" href=\"#node环境的js执行机制\">#</a> Node 环境的 JS 执行机制</h4>\n<p>​\t\tnode 环境下 js 事件循环机制与 浏览器环境下有出入，不过随着 node 版本的更新，正在不断规范。</p>\n<p>nod 执行栈 -&gt; 宏任务 -&gt; 宏任务 -&gt; 微任务 -&gt; 微任务</p>\n<p>浏览器环境：执行栈 -&gt; 宏任务 -&gt; 微任务 -&gt; 宏任务 -&gt; 微任务</p>\n",
            "tags": [
                "JS,es6"
            ]
        }
    ]
}