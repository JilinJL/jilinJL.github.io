{
    "version": "https://jsonfeed.org/version/1",
    "title": "寂林的小窝 • All posts by \"浅试一下es6+\" category",
    "description": "飒飒西风满院栽，蕊寒香冷蝶难来",
    "home_page_url": "http://example.com",
    "items": [
        {
            "id": "http://example.com/js/es6/ES6-%E5%85%9C%E5%85%9C%E8%BD%AC%E8%BD%AC%E8%BF%98%E6%98%AF%E4%BD%A0/",
            "url": "http://example.com/js/es6/ES6-%E5%85%9C%E5%85%9C%E8%BD%AC%E8%BD%AC%E8%BF%98%E6%98%AF%E4%BD%A0/",
            "title": "ES6",
            "date_published": "2022-11-17T14:56:14.192Z",
            "content_html": "<h1 id=\"ecma-script-6\"><a class=\"markdownIt-Anchor\" href=\"#ecma-script-6\">#</a> ECMA script 6</h1>\n<hr>\n<p>其实是 ES6➕之后的版本统称 ES6</p>\n<hr>\t\n<h2 id=\"1var-let-和-const\"><a class=\"markdownIt-Anchor\" href=\"#1var-let-和-const\">#</a> 1.var , let 和 const</h2>\n<p><strong>var 声明变量会在全局 window 下，let ,const 只能在块级作用域有效（if,for,while）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var可以重复声明，let ，const 不行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var存在变量提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);  <span class=\"comment\">//undefined  不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;xs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let 不影响作用域链的值查找</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;xs&#x27;</span>;</span><br><span class=\"line\">    f=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);\t<span class=\"comment\">//xs 在f函数块级没找到，于是往上一级找到name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意！ for循环内如果是 let 声明的循环变量，则会生成n个块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, i &lt; <span class=\"number\">5</span>,i ++) <span class=\"comment\">//0，1，2，3，4</span></span><br><span class=\"line\"><span class=\"comment\">//如果是 var 声明的循环变量 ，则会在最后一次循环后覆盖前面值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, i &lt; <span class=\"number\">5</span>,i ++) <span class=\"comment\">//5,5,5,5,5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>const 声明变量不能修改，必须赋初始值</strong></p>\n<h2 id=\"2解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#2解构赋值\">#</a> 2. 解构赋值</h2>\n<p>​\t1.\t数组解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">F4</span> = [<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c,d] = <span class=\"variable constant_\">F4</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// two</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>​\t对象解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xs&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">run</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;running..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age,run&#125; = person;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#3模板字符串\">#</a> 3. 模板字符串</h2>\n<p>使用 <strong>`` 反引号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 直接可以使用换行符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">\t\t  第二行`</span></span><br><span class=\"line\"><span class=\"comment\">//2. 使用 $&#123;&#125; 字符串内使用变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;lhp&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>是我的名字`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#4箭头函数\">#</a> 4. 箭头函数</h2>\n<p><mark>关于箭头函数的 this</mark> <strong>箭头函数的 this 无法改变（call,apply…），始终指向函数声明是的作用域下的 this</strong></p>\n<p><mark>constructor</mark> <strong>箭头函数 不能作为构造函数去创建实例化对象！</strong></p>\n<p><mark>arguments</mark> <strong>箭头函数不能用 arguments 获取参数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明普通函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sum</span>=(<span class=\"params\">a,b</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//关于箭头函数的this   箭头函数的this无法改变（call,apply...），始终指向函数声明是的作用域下的this  ****</span></span><br><span class=\"line\"><span class=\"comment\">//补充： 定时器函数内的this指向winodw 可以在定时器前使用 const _this = this 来保存this并使用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型和原型链\">#</a> <em>原型和原型链</em>：</h3>\n<p>Object; Function; Array; Map; Set;JS 中顶级对象是 Object，<strong>Object.prototype: 最顶层的原型对象</strong></p>\n<img data-src=\"C:\\Users\\jilin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221112175839161.png\" alt=\"image-20221112175839161\"  />\n<h5 id=\"1构造函数\"><a class=\"markdownIt-Anchor\" href=\"#1构造函数\">#</a> 1. 构造函数：</h5>\n<blockquote>\n<p>1. 构造函数首字母必须大写。<br>\n2. 内部使用 this 对象，来指向要生成的对象实例。<br>\n3. 使用 new 来调用构造函数，返回对象实例。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;keith&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2构造函数的缺点\"><a class=\"markdownIt-Anchor\" href=\"#2构造函数的缺点\">#</a> 2. 构造函数的缺点</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,height</span>)&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=name;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>=height;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">hobby</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">&#x27;watching movies&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里的boy 和 girl 出自同一个构造函数Person 但是hobby却不全等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boy=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;keith&#x27;</span>,<span class=\"number\">180</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> girl=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;rascal&#x27;</span>,<span class=\"number\">153</span>);</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(girl.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;rascal&#x27;</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">hobby</span>===girl.<span class=\"property\">hobby</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//**每当使用new来调用构造函数放回一个对象实例的时候，都会创建一个hobby方法。这既没有必要，又浪费资源**</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3prototype属性\"><a class=\"markdownIt-Anchor\" href=\"#3prototype属性\">#</a> 3.prototype 属性</h5>\n<p>js 中每个数据类型都是对象（除了 null 和 undefined），而每个对象都继承自另外一个对象，后者称为 “原型”（prototype）对象，只有 null 除外，它没有自己的原型对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,height</span>)&#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=name;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">height</span>=height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hobby</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;      <span class=\"comment\">//把hobby方法放在原型对象上，对象实例可以继承</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;watching movies&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boy=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;keith&#x27;</span>,<span class=\"number\">180</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> girl=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;rascal&#x27;</span>,<span class=\"number\">153</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(girl.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;rascal&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">hobby</span>===girl.<span class=\"property\">hobby</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，当某个对象实例没有该属性和方法时，就会到<strong>原型对象</strong>上去查找。如果实例对象自身有某个属性或方法，就不会去原型对象上查找。</p>\n<p><mark><strong>重点：</strong></mark></p>\n<ol>\n<li>\n<blockquote>\n<p><strong>原型对象的作用，就是定义所有对象实例所共享的属性和方法。</strong></p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p><strong>prototype，对于构造函数来说，它是一个属性；对于对象实例来说，它是一个 (<em>proto</em>) 原型对象。</strong></p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"4原型链prototype-chains\"><a class=\"markdownIt-Anchor\" href=\"#4原型链prototype-chains\">#</a> 4. 原型链（prototype chains）</h5>\n<p><code>由于原型对象本身对于对象实例来说也是对象，它也有自己的原型，所以形成了一条原型链（prototype chain）。</code> <br>\n <code>比如，a对象是b对象的原型，b对象是c对象的原型，以此类推_proto_。</code></p>\n<p>​\t  定义一个数组 arr，数组里面有三个元素。我们并没有给数组添加任何属性和方法，可是却在调用 **length，join ()，valueOf ()** 时，却不会报错。</p>\n<p><strong>length</strong> 属性是继承自 Array.prototype 的，属于原型对象上的一个属性。join 方法也是继承自 Array.prototype 的，属于原型对象上的一个方法。这两个方法是所有数组所共享的。当实例对象上没有这个 length 属性时，就会去原型对象查找。</p>\n<p><strong>valueOf</strong> 方法是继承自 Object.prototype 的。首先，arr 数组是没有 valueOf 方法的，所以就到原型对象 Array.prototype 查找。然后，发现 Array.prototype 对象上没有 valueOf 方法。最后，再到它的原型对象 Object.prototype 查找。</p>\n<h5 id=\"5constructor\"><a class=\"markdownIt-Anchor\" href=\"#5constructor\">#</a> 5.constructor</h5>\n<p>​\t<strong>原型 (prototype) 对象有一个 constructor 属性，默认指向该对象所在的构造函数。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>); <span class=\"comment\">//A()</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//a是构造函数A的实例对象，但是a自身没有contructor属性，该属性其实是读取原型链上面的</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===A) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===<span class=\"title class_\">Array</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//判断实例对象a的构造函数是A而不是Array</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6instanceof\"><a class=\"markdownIt-Anchor\" href=\"#6instanceof\">#</a> 6.instanceof</h5>\n<ol>\n<li>instanceof 运算符返回一个布尔值，表示指定对象是否为某个构造函数的实例。</li>\n<li>因为 instanceof 对整个原型链上的对象都有效，所以同一个实例对象，可能会对多个构造函数都返回 true。</li>\n<li>instanceof 对象只能用于复杂数据类型（数组，对象等），不能用于简单数据类型（布尔值，数字，字符串等）。</li>\n</ol>\n<h5 id=\"7typeof\"><a class=\"markdownIt-Anchor\" href=\"#7typeof\">#</a> 7.typeof</h5>\n<p>​\t判断类型方法，当碰到 <code>Array</code> 、 <code>Function</code>  等类型时均返回一个 <code>Object</code> <br>\n 所以可以用 <code>Object.prototype.toString.call(obj)</code>  方法来识别对象类型。<br>\n返回一个 &quot;[object Type]&quot;</p>\n<h2 id=\"5rest参数\"><a class=\"markdownIt-Anchor\" href=\"#5rest参数\">#</a> 5.rest 参数 ——…</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = (<span class=\"params\">...args</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)    <span class=\"comment\">// [&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;] 输出一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(...arr)  <span class=\"comment\">//表示把arr数组中的每一项作为参数传入fn </span></span><br></pre></td></tr></table></figure>\n<p>** 注意：利用 …arr 来复制数组是浅拷贝，无法复制原数组内的方法… **</p>\n<h2 id=\"6symbol\"><a class=\"markdownIt-Anchor\" href=\"#6symbol\">#</a> 6.Symbol</h2>\n<p>​\tsymbol 是唯一的标识，可是使属性唯一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s =<span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//-----</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">a1 === a2  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a1  <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a2  <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3= <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">a1 === a3      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>USONB   undefined String Object Number Null Boolean</p>\n<h2 id=\"7迭代器\"><a class=\"markdownIt-Anchor\" href=\"#7迭代器\">#</a> 7. 迭代器</h2>\n<p>​\tSymbol.iterator 有属性 next ()</p>\n<blockquote>\n<p>next () 方法返回的迭代器对象 IteratorResult 包含两个属性：done 和 value。done 是一个布 尔值，表示是否还可以再次调用 next () 取得下一个值；value 包含可迭代对象的下一个值（done 为 false），或者 undefined（done 为 true）。done: true 状态称为 “耗尽”</p>\n</blockquote>\n<p>​\tfor…in…  取下标</p>\n<p>​\tfor…of…  取 值</p>\n<h5 id=\"手写迭代器遍历一个对象\"><a class=\"markdownIt-Anchor\" href=\"#手写迭代器遍历一个对象\">#</a> <mark>手写迭代器遍历一个对象：</mark></h5>\n<p><em>需求</em>：<em>遍历对象 pencilCase 中的所有 pens</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pencilCase=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小天才&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pens</span>: [<span class=\"string\">&#x27;钢笔&#x27;</span>,<span class=\"string\">&#x27;圆珠笔&#x27;</span>,<span class=\"string\">&#x27;铅笔&#x27;</span>,<span class=\"string\">&#x27;橡皮擦&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> pencilCase)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &quot;Uncaught TypeError: pencilCase is not iterable&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确做法，利用迭代器的next()机制</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pencilCase=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小天才&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pens</span>: [<span class=\"string\">&#x27;钢笔&#x27;</span>,<span class=\"string\">&#x27;圆珠笔&#x27;</span>,<span class=\"string\">&#x27;铅笔&#x27;</span>,<span class=\"string\">&#x27;橡皮擦&#x27;</span>],</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注意迭代器写法</span></span><br><span class=\"line\">    [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()&#123; <span class=\"comment\">//中括号等于重写了这个属性</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意 由于是箭头函数 这里的this指向pencilCase</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index&lt;<span class=\"variable language_\">this</span>.<span class=\"property\">pens</span>.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> result=&#123;<span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">pens</span>[index],<span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>,<span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> pencilCase)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8生成器\"><a class=\"markdownIt-Anchor\" href=\"#8生成器\">#</a> 8. 生成器  *</h2>\n<p>​\t\t生成器不能用箭头函数创建</p>\n<p>​\t\t<strong>生成异步函数队列，每一次调用 next () 执行一个代码块</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第一个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;222&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第二个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;333&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第三个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;444&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">gen</span>(<span class=\"string\">&#x27;参数&#x27;</span>) <span class=\"comment\">//可以传参</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">//参数 111 &#123;value:&#x27;这是第一个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 222 &#123;value:&#x27;这是第二个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 333 &#123;value:&#x27;这是第三个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 444 &#123;value:undefined, done: true&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// value:undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每次  <em>iterator.next (‘参数’)</em> 传入的参数</p>\n<p>将作为上一次断点的返回结果</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> one = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(one);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()  <span class=\"comment\">//第一个next用于启动生成器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;将作为第一个断点返回值的参数&#x27;</span>)) <span class=\"comment\">//将作为第一个断点返回值的参数  &#123;value: &#x27;point2&#x27;, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>生成器可以解决</strong> <mark>回调地狱</mark> 问题</p>\n<p>回调： 1s 后输出 111， 1.5s 后输出 222， 2s 后输出 333</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>)</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">333</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1500</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>使用生成器</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn1</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn2</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;222&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">1500</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn3</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;333&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title class_\">FnList</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn1</span>()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn2</span>()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn3</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title class_\">FnList</span>()</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()\t\t<span class=\"comment\">// 111   222    333</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9promise\"><a class=\"markdownIt-Anchor\" href=\"#9promise\">#</a> 9.Promise</h2>\n<p>​\t<em>异步编程的一种方案，解决了回调地狱的问题，是一种链式调动的方式</em></p>\n<p>原生 promise, 状态的改变是通过 resolve () 和 reject () 函数来实现的，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise本身直接运行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//模拟一个异步</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span></span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">myPromise.<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取数据失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>catch</strong> 方法，实际上是<strong> then</strong> 方法的语法糖，catch 会停止之后的所有 then。</p>\n<h2 id=\"10setmap\"><a class=\"markdownIt-Anchor\" href=\"#10setmap\">#</a> 10.Set&amp;Map</h2>\n<h3 id=\"1set\"><a class=\"markdownIt-Anchor\" href=\"#1set\">#</a> 1.Set</h3>\n<p>set 集合内的值是<strong>不重复</strong>的</p>\n<p>add (value) 添加； delete (value) 删除； has (value) 查看集合内有无该值，返回一个布尔值 clear ()； 清除集合</p>\n<p>注意配合 <mark>扩展运算符</mark>  （…）使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(mySet)  <span class=\"comment\">//把集合转为数组 </span></span><br><span class=\"line\"><span class=\"comment\">//可以用 for ... of 遍历Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">keys</span>()) &#123;  <span class=\"comment\">//遍历键</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">values</span>()) &#123;  <span class=\"comment\">//遍历值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">entries</span>()) &#123;  <span class=\"comment\">//遍历键值对</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用 filter 实现各种过滤</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a, ...b]);</span><br><span class=\"line\"><span class=\"comment\">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> intersect = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> b.<span class=\"title function_\">has</span>(x)));</span><br><span class=\"line\"><span class=\"comment\">// set &#123;2, 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difference = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !b.<span class=\"title function_\">has</span>(x)));</span><br><span class=\"line\"><span class=\"comment\">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2map\"><a class=\"markdownIt-Anchor\" href=\"#2map\">#</a> 2.Map</h3>\n<p>​\tMap 和 Object 区别 ： Map 的键值对中，任何值都可以作为键</p>\n<p>同 Set ，Map 也能用 **for…of ** 遍历，并且也可以 Map.keys () 遍历键 Map.values () 遍历值…</p>\n<h2 id=\"11clas类\"><a class=\"markdownIt-Anchor\" href=\"#11clas类\">#</a> 11.Clas 类</h2>\n<h3 id=\"1静态成员-原生函数对象内无法加静态方法\"><a class=\"markdownIt-Anchor\" href=\"#1静态成员-原生函数对象内无法加静态方法\">#</a> 1. 静态成员 （原生函数对象内无法加静态方法）</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>= age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">say</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ming = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;ming&#x27;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ming)  <span class=\"comment\">//Person &#123; name: &#x27;ming&#x27;, age: 20 &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">say</span>(<span class=\"string\">&#x27;ming&#x27;</span>);  <span class=\"comment\">//静态方法 只能类自身用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2继承原生继承是给-fnprototype加属性或方法\"><a class=\"markdownIt-Anchor\" href=\"#2继承原生继承是给-fnprototype加属性或方法\">#</a> 2. 继承（原生继承是给 fn.prototype 加属性或方法 ）</h3>\n<p>​\t<strong>为什么构造函数的方法不直接写进构造函数，而是写入其原型对象？</strong></p>\n<blockquote>\n<p>​\t\t因为写进构造函数，每次创建一个实例对象都会创建那个方法，白白占用内存，写入其原型对象中，实例对象就可以直接调用。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">walk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am walking&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stu</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;   <span class=\"comment\">// extends继承</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, grade, major</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, age);       <span class=\"comment\">// super...哈</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">grade</span> = grade;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">major</span> = major;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> <span class=\"title class_\">Stu</span>(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;软件工程&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xiaoming);  <span class=\"comment\">//Stu &#123; name: &#x27;小明&#x27;, age: 20, grade: 3, major: &#x27;软件工程&#x27; &#125;</span></span><br><span class=\"line\">xiaoming.<span class=\"title function_\">walk</span>();        <span class=\"comment\">// I am walking</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3多态子类对父类方法重写\"><a class=\"markdownIt-Anchor\" href=\"#3多态子类对父类方法重写\">#</a> 3. 多态，子类对父类方法重写</h3>\n<h3 id=\"4set和get类似java\"><a class=\"markdownIt-Anchor\" href=\"#4set和get类似java\">#</a> 4.set 和 get（类似 java）</h3>\n<h2 id=\"12类型转换\"><a class=\"markdownIt-Anchor\" href=\"#12类型转换\">#</a> 12. 类型转换</h2>\n<img data-src=\"https://lanhaooss.oss-cn-shenzhen.aliyuncs.com/images/convert-table.png\" alt=\"convert-table\" style=\"zoom:50%;\" />\n<h3 id=\"1减-乘-除\"><a class=\"markdownIt-Anchor\" href=\"#1减-乘-除\">#</a> 1. 减、乘、除</h3>\n<p><strong>我们在对各种非 <code>Number</code>  类型运用数学运算符 ( <code>- * /</code> ) 时，会先将非 <code>Number</code>  类型转换为 <code>Number</code>  类型。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> == <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"literal\">undefined</span> == <span class=\"title class_\">NaN</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2加法\"><a class=\"markdownIt-Anchor\" href=\"#2加法\">#</a> 2 加法</h3>\n<ul>\n<li>当一侧为 <code>String</code>  类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li>\n<li>当一侧为 <code>Number</code>  类型，另一侧为原始类型，则将原始类型转换为 <code>Number</code>  类型。</li>\n<li>当一侧为 <code>Number</code>  类型，另一侧为引用类型，将引用类型和 <code>Number</code>  类型转换成字符串后拼接。</li>\n</ul>\n<h3 id=\"3逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#3逻辑运算\">#</a> 3. 逻辑运算</h3>\n<p>​\t\t<strong>当我们使用  <code>if</code>   <code>while</code>   <code>for</code>  语句时，我们期望表达式是一个 <code>Boolean</code> ，所以一定伴随着隐式类型转换。而这里面又分为两种情况：</strong></p>\n<h4 id=\"1单个变量ifnum-while-index\"><a class=\"markdownIt-Anchor\" href=\"#1单个变量ifnum-while-index\">#</a> 1. 单个变量（if (num)、while ( index )…）</h4>\n<h4 id=\"2-使用-比较\"><a class=\"markdownIt-Anchor\" href=\"#2-使用-比较\">#</a> 2. 使用 == 比较</h4>\n<ul>\n<li>\n<p>规则 1： <code>NaN</code>  和其他任何类型比较永远返回 <code>false</code> （包括和他自己\b）。</p>\n</li>\n<li>\n<p>规则 2：Boolean 和其他任何类型比较，Boolean 首先被转换为 Number 类型（0 / 1）。</p>\n</li>\n<li>\n<p>规则 3： <code>String</code>  和 <code>Number</code>  比较，先将 <code>String</code>  转换为 <code>Number</code>  类型。</p>\n</li>\n<li>\n<p>规则 4： <code>null == undefined</code>  比较结果是 <code>true</code> ，除此之外， <code>null</code> 、 <code>undefined</code>  和其他任何结果的比较值都为 <code>false</code> 。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"14asycn-await\"><a class=\"markdownIt-Anchor\" href=\"#14asycn-await\">#</a> 14.asycn 、 await</h2>\n<p>ES8 新特性</p>\n<p><strong>asycn 函数</strong>，返回一个 Promise 类型的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//resolve(&#x27;数据成功&#x27;)</span></span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">f.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(reason);</span><br><span class=\"line\">&#125;)\t\t<span class=\"comment\">//状态：失败 ， 内容：出错了</span></span><br></pre></td></tr></table></figure>\n<p><strong>await</strong> 必须写在 async 函数中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> $.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>await 获取 async 异步的结果</p>\n",
            "tags": [
                "es6"
            ]
        }
    ]
}