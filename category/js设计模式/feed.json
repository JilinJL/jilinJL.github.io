{
    "version": "https://jsonfeed.org/version/1",
    "title": "寂林のへや • All posts by \"js设计模式\" category",
    "description": "人工智能,web前端,软件开发",
    "home_page_url": "https://jilinJL.github.io",
    "items": [
        {
            "id": "https://jilinjl.github.io/js/design-patterns/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://jilinjl.github.io/js/design-patterns/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "JS设计模式",
            "date_published": "2023-05-12T02:06:33.767Z",
            "content_html": "<h1 id=\"javascript中的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#javascript中的设计模式\">#</a> JavaScript 中的设计模式</h1>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>​\t\t设计模式，往往是软件设计中的最佳实践，是前人对问题的解决经验的总结。我认为学习并理解设计模式，对自己的程序设计，软件开发有很大帮助，同时也可以扩展自己开发设计的思维。我是后来才明白，所有编程语言，都有设计模式这一说法，读《JavaScript 中的设计模式》这本书，给了我很大启发。</p>\n<h3 id=\"关于es6的继承\"><a class=\"markdownIt-Anchor\" href=\"#关于es6的继承\">#</a> 关于 ES6 的继承：</h3>\n<blockquote>\n<p>​\t\t子类必须在 <code>constructor</code>  方法中调用 <code>super</code>  方法，否则新建实例时会报错。这是因为子类没有自己的 <code>this</code>  对象，而是继承父类的 <code>this</code>  对象，然后对其进行加工。如果不调用 <code>super</code>  方法，子类就得不到 <code>this</code>  对象。</p>\n</blockquote>\n<blockquote>\n<p>ES5 的继承，实质是先创造子类的实例对象 <code>this</code> ，然后再将父类的方法添加到 <code>this</code>  上面（ <code>Parent.apply(this)</code> ）。</p>\n<p>ES6 的继承机制完全不同，实质是先创造父类的实例对象 <code>this</code> （所以必须先调用 <code>super</code>  方法），然后再用子类的构造函数修改 <code>this</code> 。</p>\n<p>如果子类没有定义 <code>constructor</code>  方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有 <code>constructor</code>  方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"设计模式的六大原则\"><a class=\"markdownIt-Anchor\" href=\"#设计模式的六大原则\">#</a> 设计模式的六大原则</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTY3Mjc5ODQ5NTk3NTY2OTg0\">单一职责原则（Single Responsibility Principle）</span>；</li>\n</ul>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODM2NzUz\">开闭原则（Open Closed Principle）</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjg1NzQ2NDE=\">里氏替换原则（Liskov Substitution Principle)</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSVRQb3dlci9wLzE0ODczMDcyLmh0bWw=\">迪米特法则（Law of Demeter），又叫 “最少知道法则”</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU5NDA0MS9hcnRpY2xlL2RldGFpbHMvMTEyNzI3MjI0\">接口隔离原则（Interface Segregation Principle）</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jM2NlNjc2MjI1N2M=\">依赖倒置原则（Dependence Inversion Principle）</span>。</li>\n</ul>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211172227388.png\" alt=\"image-20221115144952471\" style=\"zoom: 80%;\" />\n<hr>\n<h2 id=\"创造型设计模式5\"><a class=\"markdownIt-Anchor\" href=\"#创造型设计模式5\">#</a> 创造型设计模式（5）</h2>\n<h3 id=\"1工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#1工厂模式\">#</a> 1. 工厂模式</h3>\n<p>​\t\t工厂模式是比较常用的设计模式之一，那么什么叫模式呢？简单来说，就是你需要什么东西，不直接使用 new 的方法生成实例，而是通过工厂加工再生成实例。</p>\n<p>​\t\t比如我们现在需要生产三种形状，分别为：圆形，正方形，三角形。我们可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个圆形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个三角形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个正方形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myCircle = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();</span><br><span class=\"line\">myCircle.<span class=\"title function_\">draw</span>(); <span class=\"comment\">//画了一个圆形</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t但是这样的话，每次我需要一个圆形，都要自己 new 一个 Circle，如果需要其他形状，又要 new 一个其他的构造类，下面我们来建一个工厂，负责生产不同的形状。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">shapeFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shapeType) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Circle&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();\t<span class=\"comment\">//生产new圆</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Triangle&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Square&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Square</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shapefactory = <span class=\"keyword\">new</span> <span class=\"title function_\">shapeFactory</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> myCircle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;Circle&quot;</span>);\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> myTriangle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;Triangle&quot;</span>);</span><br><span class=\"line\">myCircle.<span class=\"title function_\">draw</span>()\t\t<span class=\"comment\">//画了一个圆形</span></span><br><span class=\"line\">myTriangle.<span class=\"title function_\">draw</span>()\t<span class=\"comment\">//画了一个三角形</span></span><br></pre></td></tr></table></figure>\n<p><strong>工厂模式的优势</strong>：使用工厂模式的好处也是显而易见的，比如实例的生产比较复杂，或者说生成实例后还需要额外加工，这个时候工厂给了我们一个统一的出入口，也方便了日后对这个实例的修改。比如你要修改产出是一个单例的时候，就不需要在所有类中修改，而只需要在工厂出口修改即可。</p>\n<h3 id=\"2抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#2抽象工厂模式\">#</a> 2. 抽象工厂模式</h3>\n<p>​\t\t抽象工厂？这名字确实挺抽象，因为一般来讲一个工厂只负责加工一个组件，而你的产品需要很多组件合成组装，因此你需要很多生产不同组件的工厂，那么如何管理这些工厂呢，那就用生产工厂的工厂！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//形状有哪些</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个圆形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个三角形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个正方形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//颜色有哪些</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Blue</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充蓝色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Red</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充红色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Yellow</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充黄色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//先拿到上文的形状工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">ShapeFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (shapeType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Circle&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Triangle&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Square&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Square</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//再创建一个颜色工厂负责上色</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">ColorFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getColor</span>(<span class=\"params\">colorType</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (colorType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Blue&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blue</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Green&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Green</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Yellow&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Yellow</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//抽象工厂，负责管理下面所有工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">FatherFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getFactory</span>(<span class=\"params\">choice</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (choice) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Color&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ColorFactory</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Shape&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShapeFactory</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//现在开始生产</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fatherfactory = <span class=\"keyword\">new</span> <span class=\"title class_\">FatherFactory</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> colorfactory = fatherfactory.<span class=\"title function_\">getFactory</span>(<span class=\"string\">&#x27;Color&#x27;</span>)    <span class=\"comment\">//生产颜色工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> shapefactory = fatherfactory.<span class=\"title function_\">getFactory</span>(<span class=\"string\">&#x27;Shape&#x27;</span>)    <span class=\"comment\">//生产形状工厂</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> myCircle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&#x27;Circle&#x27;</span>)</span><br><span class=\"line\">  myCircle.<span class=\"title function_\">draw</span>()  <span class=\"comment\">// &quot;画了一个圆形&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> blue = colorfactory.<span class=\"title function_\">getColor</span>(<span class=\"string\">&#x27;Blue&#x27;</span>)</span><br><span class=\"line\">  blue.<span class=\"title function_\">fill</span>();     <span class=\"comment\">// &quot;填充蓝色&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>说说好处</strong>：和工厂模式类似，抽象工厂模式方便了对各种工厂的管理。</p>\n<h3 id=\"3单例模式\"><a class=\"markdownIt-Anchor\" href=\"#3单例模式\">#</a> 3. 单例模式</h3>\n<p>​\t\t顾名思义，单例模式就是每个实例只生产一次。单例模式又分为两种，一种叫<strong>懒汉式</strong>，一种叫<strong>饿汉式</strong>。区别在于，懒汉式是使用的时候才初始化，饿汉式是先初始化，需要用的时候直接给。<br>\n​\t\t值得注意的是懒汉式写法在 java 中可能会对线程安全有影响，但是 JS 是单线程的，不需要考虑线程安全哈哈哈，所以优先考虑懒汉式。</p>\n<p>TODO…</p>\n<h2 id=\"结构型设计模式8\"><a class=\"markdownIt-Anchor\" href=\"#结构型设计模式8\">#</a> 结构型设计模式（8）</h2>\n<h2 id=\"行为型设计模式12\"><a class=\"markdownIt-Anchor\" href=\"#行为型设计模式12\">#</a> 行为型设计模式（12）</h2>\n",
            "tags": [
                "es6",
                "js"
            ]
        }
    ]
}