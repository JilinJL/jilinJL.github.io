{
    "version": "https://jsonfeed.org/version/1",
    "title": "寂林のへや • All posts by \"react\" category",
    "description": "人工智能,web前端,软件开发",
    "home_page_url": "https://jilinJL.github.io",
    "items": [
        {
            "id": "https://jilinjl.github.io/react/TypeScript/",
            "url": "https://jilinjl.github.io/react/TypeScript/",
            "title": "TypeScript基础",
            "date_published": "2023-05-12T02:05:15.721Z",
            "content_html": "<h1 id=\"typescript基础\"><a class=\"markdownIt-Anchor\" href=\"#typescript基础\">#</a> TypeScript 基础</h1>\n<p><code>TS是JS的超集，最主要的变化就是引入了Type，对每个变量可以声明类型，类似于其他面向对象语言（java，C#）。</code></p>\n<h2 id=\"安装配置\"><a class=\"markdownIt-Anchor\" href=\"#安装配置\">#</a> 安装配置</h2>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i typescript -g</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tsc xxx.ts 编译为js然后使用node运行</span><br></pre></td></tr></table></figure>\n<h2 id=\"类型明确\"><a class=\"markdownIt-Anchor\" href=\"#类型明确\">#</a> 类型明确</h2>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">数据类型</th>\n<th style=\"text-align:left\">关键字</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">任意类型</td>\n<td style=\"text-align:left\">any</td>\n<td style=\"text-align:left\">声明为 any 的变量可以赋予任意类型的值。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数字类型</td>\n<td style=\"text-align:left\">number</td>\n<td style=\"text-align:left\">双精度 <strong>64</strong> 位浮点值。它可以用来表示整数和分数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">字符串类型</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">一个字符系列，使用单引号（<strong>’</strong>）或双引号（<strong>&quot;</strong>）来表示字符串类型。以及模板字符串: let words: string =  <code>您好，今年是 $&#123; name &#125; 发布 $&#123; years + 1&#125; 周年</code> ；` |</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">布尔类型</td>\n<td style=\"text-align:left\">boolean</td>\n<td style=\"text-align:left\">表示逻辑值：true 和 false。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">数组类型</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">声明变量为数组。 <code>// 在元素类型后面加上[] let arr: number[] = [1, 2]; 或者使用数组泛型 let arr: Array&lt;number&gt; = [1, 2];</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">元组</td>\n<td style=\"text-align:left\">无</td>\n<td style=\"text-align:left\">元组类型用来表示<strong>已知元素数量</strong>和类型的数组，各元素的类型不必相同，<strong>对应位置的类型</strong>需要相同。 <code>let x: [string, number]; x = ['Runoob', 1];    // 运行正常 x = [1, 'Runoob'];    // 报错 console.log(x[0]);    // 输出 Runoob</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">枚举</td>\n<td style=\"text-align:left\">enum</td>\n<td style=\"text-align:left\">枚举类型用于定义数值集合。 <code>enum Color &#123;Red, Green, Blue&#125;; let c: Color = Color.Blue; console.log(c);    // 输出 2</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:left\">void</td>\n<td style=\"text-align:left\">用于标识方法返回值的类型，表示该方法没有返回值。 <code>function hello(): void &#123;    alert(&quot;Hello Runoob&quot;); &#125;</code></td>\n</tr>\n<tr>\n<td style=\"text-align:left\">null</td>\n<td style=\"text-align:left\">null</td>\n<td style=\"text-align:left\">表示对象值缺失。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">undefined</td>\n<td style=\"text-align:left\">undefined</td>\n<td style=\"text-align:left\">用于初始化变量为一个未定义的值</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">never</td>\n<td style=\"text-align:left\">never</td>\n<td style=\"text-align:left\">never 是其它类型（包括 null 和 undefined）的子类型，代表从不会出现的值。</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"定义类型\"><a class=\"markdownIt-Anchor\" href=\"#定义类型\">#</a> 定义类型</h3>\n<h4 id=\"简单变量类型\"><a class=\"markdownIt-Anchor\" href=\"#简单变量类型\">#</a> 简单变量类型</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">sum</span>:<span class=\"built_in\">number</span> = <span class=\"number\">0</span>;</span><br><span class=\"line\">sum=<span class=\"number\">10</span>;</span><br><span class=\"line\"><span class=\"comment\">// sum=&quot;a&quot;;   --Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"对象类型\"><a class=\"markdownIt-Anchor\" href=\"#对象类型\">#</a> 对象类型</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 对象的类型</span></span><br><span class=\"line\"><span class=\"keyword\">interface</span> <span class=\"title class_\">Student</span>&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>:<span class=\"built_in\">string</span>; <span class=\"comment\">//规定了Student对象内的字段类型</span></span><br><span class=\"line\">    <span class=\"attr\">age</span>:<span class=\"built_in\">number</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">zs</span>:<span class=\"title class_\">Student</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;张三&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">19</span>,</span><br><span class=\"line\"><span class=\"comment\">//  age: &quot;19&quot;,  Type &#x27;string&#x27; is not assignable to type &#x27;number&#x27;.</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>可选属性</strong></p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// &#123;&#125; 指定对象内属性</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">student</span>: &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, <span class=\"attr\">age</span>: <span class=\"built_in\">number</span>&#125;</span><br><span class=\"line\">student = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;张三&quot;</span>,<span class=\"attr\">age</span>: <span class=\"number\">19</span>&#125;</span><br><span class=\"line\">student = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;李四&#x27;</span>&#125;    <span class=\"comment\">//缺少age属性,报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//在属性名后面加上 ? ,表示属性是可选的</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">teacher</span>: &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, age?:<span class=\"built_in\">number</span>&#125;;</span><br><span class=\"line\">teacher = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;王老师&#x27;</span>,<span class=\"attr\">age</span>: <span class=\"number\">29</span>&#125;</span><br><span class=\"line\">teacher = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;张老师&#x27;</span>&#125;   <span class=\"comment\">//缺少age属性,但不会报错</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//或者使用</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">master</span>: &#123;<span class=\"attr\">name</span>: <span class=\"built_in\">string</span>, [<span class=\"attr\">other</span>: <span class=\"built_in\">string</span>]: <span class=\"built_in\">any</span>&#125;</span><br><span class=\"line\">master = &#123;<span class=\"attr\">name</span>:<span class=\"string\">&quot;master&quot;</span>,<span class=\"attr\">other</span>:<span class=\"string\">&quot;其他随便添加也不会报错&quot;</span>,<span class=\"attr\">habits</span>: <span class=\"string\">&quot;football&quot;</span>&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(master);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//对于函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">add</span> = (<span class=\"params\">a:<span class=\"built_in\">number</span>,b:<span class=\"built_in\">number</span></span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">add</span>(<span class=\"number\">2</span>, <span class=\"number\">3</span>));   <span class=\"comment\">// 5</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"枚举类型\"><a class=\"markdownIt-Anchor\" href=\"#枚举类型\">#</a> 枚举类型</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//enum 枚举类型</span></span><br><span class=\"line\"><span class=\"keyword\">enum</span> sex&#123;</span><br><span class=\"line\">    <span class=\"title class_\">Male</span> = <span class=\"number\">1</span>,</span><br><span class=\"line\">    <span class=\"title class_\">Female</span> = <span class=\"number\">2</span>,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> tom = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;Master&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">sex</span>: sex.<span class=\"property\">Male</span>,      <span class=\"comment\">// 根据枚举中对应值,存储的实际上是 1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(tom);       <span class=\"comment\">// &#123; name: &#x27;Master&#x27;, sex: 1 &#125;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"组合类型\"><a class=\"markdownIt-Anchor\" href=\"#组合类型\">#</a> 组合类型</h3>\n<h4 id=\"聚合\"><a class=\"markdownIt-Anchor\" href=\"#聚合\">#</a> 聚合</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">MyBool</span> = <span class=\"literal\">true</span> | <span class=\"literal\">false</span>;  <span class=\"comment\">//自动归类为boolean</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"泛型\"><a class=\"markdownIt-Anchor\" href=\"#泛型\">#</a> 泛型</h4>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">StringArray</span> = <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">string</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">NumberArray</span> = <span class=\"title class_\">Array</span>&lt;<span class=\"built_in\">number</span>&gt;;</span><br><span class=\"line\"><span class=\"keyword\">type</span> <span class=\"title class_\">ObjectWithNameArray</span> = <span class=\"title class_\">Array</span>&lt;&#123; <span class=\"attr\">name</span>: <span class=\"built_in\">string</span> &#125;&gt;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"类型断言\"><a class=\"markdownIt-Anchor\" href=\"#类型断言\">#</a> 类型断言</h3>\n<p>tips: unknown 类型比 any 类型更安全。</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">a</span>:<span class=\"built_in\">any</span>;</span><br><span class=\"line\">a=<span class=\"number\">10</span>;</span><br><span class=\"line\">a=<span class=\"string\">&quot;str&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">b</span>:<span class=\"built_in\">unknown</span>;</span><br><span class=\"line\">b=<span class=\"number\">10</span>;</span><br><span class=\"line\">b=<span class=\"string\">&quot;str&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"attr\">c</span>:<span class=\"built_in\">string</span>;</span><br><span class=\"line\">c=a;  <span class=\"comment\">//不会报错，但会把c也变成any类型.</span></span><br><span class=\"line\">c=b;  <span class=\"comment\">//会报错, Type &#x27;unknown&#x27; is not assignable to type &#x27;string&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">断言:</span><br><span class=\"line\">c = b <span class=\"keyword\">as</span> <span class=\"title class_\">String</span></span><br><span class=\"line\">c = &lt;<span class=\"built_in\">string</span>&gt;b;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编译选项\"><a class=\"markdownIt-Anchor\" href=\"#编译选项\">#</a> 编译选项</h2>\n<p><code>ts转js的相关配置写在根目录的tsconfig.json中</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">    tsconfig.json 是ts编译器的配置文件</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"comment\">//include 表示哪些文件需要被编译</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//exclude 不需要编译的 默认值[&quot;node_modules&quot;,&quot;bower_components&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定编译版本</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定模块化的标准</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES2015&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定使用的库</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;lib&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">[</span><span class=\"string\">&quot;DOM&quot;</span><span class=\"punctuation\">,</span><span class=\"string\">&quot;ES6&quot;</span><span class=\"punctuation\">]</span><span class=\"punctuation\">,</span>    </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 指定编译后文件所在目录      </span></span><br><span class=\"line\">        <span class=\"attr\">&quot;outDir&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;dist&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 设置outFile后所有全局作用域中的代码会合并到一个文件</span></span><br><span class=\"line\">        <span class=\"comment\">// &quot;outFile&quot;: &quot;./dist/app.js&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 是否编译JS文件</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;allowJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 是否检查js代码语法规范</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;checkJs&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 是否移除注释</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;removeComments&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不生成编译文件</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;noEmit&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不编译有错误的文件</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;noEmitOnError&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 总是按照严格模式,默认为false</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;alwaysStrict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不允许隐式any</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;noImplicitAny&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 不允许不明类型的this</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;noImplicitThis&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 严格检查空值</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strictNullChecks&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">false</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">// ...</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"打包配置\"><a class=\"markdownIt-Anchor\" href=\"#打包配置\">#</a> 打包配置</h2>\n<p><strong>使用 webpack 打包</strong></p>\n<blockquote>\n<ol>\n<li>初始化</li>\n<li>安装对应包工具</li>\n<li>新建配置 webpack.config.js</li>\n<li>新建配置 tsconfig.json</li>\n<li>配置 package.json</li>\n<li>执行 npm run build 开始打包</li>\n</ol>\n</blockquote>\n<p>首先进入项目目录，初始化</p>\n<blockquote>\n<p>npm init -y</p>\n</blockquote>\n<p>然后安装主要包</p>\n<blockquote>\n<p>npm i -D webpack webpack-cli typescript ts-loader</p>\n</blockquote>\n<p>新建<mark> webpack</mark> 配置文件  <code>webpack.config.js</code></p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302031134232.png\" alt=\"image-20230203113422164\"></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\"><span class=\"comment\">// 引入路径包</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack的所有配置都写在 module.exports中</span></span><br><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定入口文件</span></span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&quot;./src/index.ts&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 指定打包文件所在目录</span></span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指定打包文件的目录</span></span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&quot;dist&quot;</span>),</span><br><span class=\"line\">        <span class=\"comment\">// 打包后的文件名</span></span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&quot;bundle.js&quot;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//指定webpack打包时使用的模块</span></span><br><span class=\"line\">    <span class=\"attr\">module</span>:&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 指定打包的规则</span></span><br><span class=\"line\">        <span class=\"attr\">rules</span>: [</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"comment\">//test是指定的文件规则</span></span><br><span class=\"line\">                <span class=\"attr\">test</span>: <span class=\"regexp\">/\\.ts$/</span>,</span><br><span class=\"line\">                <span class=\"attr\">use</span>: <span class=\"string\">&quot;ts-loader&quot;</span>,</span><br><span class=\"line\">                <span class=\"comment\">// 排除文件</span></span><br><span class=\"line\">                <span class=\"attr\">exclude</span>: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>新建 TS 配置文件  <code>tsconfig.json</code></p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;compilerOptions&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;target&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES2015&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;module&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;ES2015&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">        <span class=\"attr\">&quot;strict&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">true</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>在 webpack 的  <code>package.json</code>  中配置 scripts, 加上一句</p>\n<blockquote>\n<p>“build”: “webpack”</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">&quot;scripts&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;test&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;echo \\&quot;Error: no test specified\\&quot; &amp;&amp; exit 1&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;build&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;webpack&quot;</span>  <span class=\"comment\">//加入这一句,直接运行build打包</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span><span class=\"punctuation\">,</span></span><br></pre></td></tr></table></figure>\n<p>最后执行 npm run build 进行打包 (这里报了一个 warning)</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302031151111.png\" alt=\"image-20230203115112069\"></p>\n<p>原因是没有指定 mode, 在 webpack.config.js 中设置</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">module</span>.<span class=\"property\">exports</span> = &#123;</span><br><span class=\"line\">    <span class=\"attr\">entry</span>: <span class=\"string\">&#x27;./src/app.js&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">output</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">path</span>: path.<span class=\"title function_\">resolve</span>(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>),</span><br><span class=\"line\">        <span class=\"attr\">filename</span>: <span class=\"string\">&#x27;main.js&#x27;</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">mode</span>: <span class=\"string\">&#x27;development&#x27;</span> <span class=\"comment\">// 设置mode</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>解决～</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302031412974.png\" alt=\"image-20230203141229926\"></p>\n<h2 id=\"babel\"><a class=\"markdownIt-Anchor\" href=\"#babel\">#</a> Babel</h2>\n<p>在 <code>webpack.config.js</code>  中添加以下 loader 配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">module.exports</span> <span class=\"string\">=</span> &#123;</span><br><span class=\"line\">  <span class=\"attr\">module:</span> &#123;</span><br><span class=\"line\">    <span class=\"attr\">rules:</span> [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"attr\">test:</span> <span class=\"string\">/.js$/</span>,</span><br><span class=\"line\">        <span class=\"attr\">exclude:</span> <span class=\"string\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"attr\">use:</span> [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            <span class=\"attr\">loader:</span> <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">            <span class=\"attr\">options:</span> &#123;</span><br><span class=\"line\">              <span class=\"attr\">presets:</span> [<span class=\"string\">&quot;@babel/preset-env&quot;</span>]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后安装相应的依赖：babel-loader、@babel/core、@babel/preset-env:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev babel-loader @babel/core @babel/preset-env</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>上面是将 babel 的 preset 参数配置在了 webpack.config.js 中，实际上也可以将它按照 babel 配置文件的原则提取出来单独一个 babel.config.json 文件，效果是一样的。</p>\n</blockquote>\n<p>这样就完成了在 webpack 项目中添加 Babel 转换 ES6 + 代码的功能。在 webpack 打包的过程中，会将源代码经由 <code>babel-loader</code>  处理转换为目标代码，这一执行过程对我们来只说是打包时 “顺势而为” 的，我们再也不用关心 Babel 本身的命令细节了。</p>\n",
            "tags": [
                "TS"
            ]
        },
        {
            "id": "https://jilinjl.github.io/react/React/",
            "url": "https://jilinjl.github.io/react/React/",
            "title": "React基础",
            "date_published": "2023-05-12T02:05:15.719Z",
            "content_html": "<h1 id=\"react\"><a class=\"markdownIt-Anchor\" href=\"#react\">#</a> React</h1>\n<p><strong>什么是 React?</strong></p>\n<p>React 是一个用于构建用户界面的 JavaScript 库。React 主要用于构建 UI</p>\n<p><strong>为什么学习 React？</strong></p>\n<p>它引入了一种新的方式来处理浏览器 DOM。那些需要手动更新 DOM、费力地记录每一个状态的日子一去不复返了 —— 这种老旧的方式既不具备扩展性，又很难加入新的功能，就算可以，也是有着冒着很大的风险。React 使用很新颖的方式解决了这些问题。你只需要声明地定义各个时间点的用户界面，而无序关系在数据变化时，需要更新哪一部分 DOM。在任何时间点，React 都能以最小的 DOM 修改来更新整个应用程序。</p>\n<p><strong>特点如下</strong></p>\n<ol>\n<li>采用组件化模式、声明式编码，提高了开发效率以及组件复用率；</li>\n<li>在 React Native 中可以使用 React 语法进行 <code>移动端开发</code> ；</li>\n<li>使用  <code>虚拟DOM</code>  + Diffing 算法，尽量减少与真实 DOM 的交互；</li>\n</ol>\n<p><strong>前置 JS 知识</strong></p>\n<p>判断 this 指向，class 类，ES6，npm 包，原型、原型链，数组操作，模块化</p>\n<h2 id=\"jsx\"><a class=\"markdownIt-Anchor\" href=\"#jsx\">#</a> jsx</h2>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>hello react<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--准备好一个“容器”--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span>&gt;</span>?<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!--引入核心库--&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/react/16.4.0/umd/react.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入react-dom 用于支持react操作dom --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/react-dom/16.4.0/umd/react-dom.development.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"comment\">&lt;!-- 引入babel 把jsx转为js --&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://cdn.bootcss.com/babel-standalone/6.26.0/babel.min.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><span class=\"language-javascript\"></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//1.创建虚拟DOM</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"keyword\">const</span> <span class=\"variable constant_\">VDOM</span> = <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello World<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"comment\">//2.渲染虚拟DOM到页面</span></span></span><br><span class=\"line\"><span class=\"language-javascript\">      <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"variable constant_\">VDOM</span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;demo&quot;</span>));</span></span><br><span class=\"line\"><span class=\"language-javascript\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>需要注意的点</strong>：</p>\n<blockquote>\n<ol>\n<li>\n<p>&lt;script&gt; 标签内要写 ‘text/babel’</p>\n</li>\n<li>\n<p>const VDOM = &lt;h1&gt;hello…&lt;h1&gt;  这里不要加 “” 或者  ‘’</p>\n</li>\n</ol>\n</blockquote>\n<p><mark>为什么 React 要求用 JSX 而不是 JS ？？</mark></p>\n<p>如果需要用到标签嵌套，jsx 更方便，而 js 创建虚拟 dom 会非常繁琐</p>\n<h3 id=\"真实dom和虚拟dom\"><a class=\"markdownIt-Anchor\" href=\"#真实dom和虚拟dom\">#</a> 真实 DOM 和虚拟 DOM</h3>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302051528540.png\" alt=\"image-20221130104457572\"></p>\n<blockquote>\n<p>关于虚拟 DOM</p>\n<p>​    1. 本质上是 Object 对象</p>\n<p>​    2. 虚拟 DOM 比较 &quot;轻&quot;, 真实 DOM 比较 &quot;重&quot;, 因为虚拟 DOM 是 React 内部在用，无需真实 DOM 上那么多属性</p>\n<pre><code>3. 虚拟DOM最终会被React转化为真实DOM,呈现在页面上\n</code></pre>\n</blockquote>\n<h3 id=\"jsx语法规则\"><a class=\"markdownIt-Anchor\" href=\"#jsx语法规则\">#</a> JSX 语法规则</h3>\n<ul>\n<li>​        读取数据要用</li>\n<li>​        读取 class 属性要用 className=xxx 而非 class= ‘’</li>\n<li>​        添加内联样式 style=&lt;!–swig￼21–&gt;, 即第一个 {} 内写一个样式对象 {}</li>\n<li>​        虚拟 DOM 只能有一个根标签</li>\n<li>​        标签必须闭合 <input type=\"xxx\" />或者 <input type=\"hidden\"></input></li>\n<li>​        标签渲染\n<ul>\n<li>1. 若标签首字母小写，则将标签转为 html 中对应的同名标签，若 html 无对应标签，则报错；</li>\n<li>2. 若首字母大写，则 react 会渲染对应的组件，若没有，则报错；</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"组件化\"><a class=\"markdownIt-Anchor\" href=\"#组件化\">#</a> 组件化</h2>\n<h3 id=\"安装插件\"><a class=\"markdownIt-Anchor\" href=\"#安装插件\">#</a> 安装插件</h3>\n<p><strong>React Developer Tools</strong><br>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302051423490.png\" alt=\"image-20230205142139780\"></p>\n<h3 id=\"函数式组件\"><a class=\"markdownIt-Anchor\" href=\"#函数式组件\">#</a> 函数式组件</h3>\n<p>适用于简单组件 (无状态)</p>\n<blockquote>\n<pre><code>       1. -组件- 首字母必须大写\n       1. 函数内的this会指向 undefined\n</code></pre>\n</blockquote>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/babel&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">Demo</span>(<span class=\"params\"></span>)&#123;    </span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>);  <span class=\"comment\">//这里的this会指向undefined 因为babel编译按照严格模式 禁止this指向window</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是函数式定义组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//渲染到页面</span></span><br><span class=\"line\">    <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span>/&gt;</span></span>,<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsx&quot;</span>));</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<p>安装插件后，可以在开发者工具 <Components> 查看组件</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302051526049.png\" alt=\"image-20230205145004663\"></p>\n<h4 id=\"关于react元素调用函数\"><a class=\"markdownIt-Anchor\" href=\"#关于react元素调用函数\">#</a> 关于 react 元素调用函数</h4>\n<p><strong>原生有三种</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"title function_\">addEventListener</span>(<span class=\"string\">&#x27;click&#x27;</span>,<span class=\"function\">()=&gt;</span>&#123;...&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 二</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> dom = <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;btn&#x27;</span>)</span><br><span class=\"line\">dom.<span class=\"property\">onclick</span>= () = &gt;&#123;...&#125;</span><br><span class=\"line\"><span class=\"comment\">// 三 </span></span><br><span class=\"line\">&lt;button onclick=<span class=\"string\">&quot;demo()&quot;</span>/&gt;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">demo</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br></pre></td></tr></table></figure>\n<p f()=\"\">React 中尽量使用第三种，并且需要注意， <code>onClick</code>  而不是  <code>onclick</code> ，要传入函数 {f} 而不是函数的调用</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// react中</span></span><br><span class=\"line\"><span class=\"title function_\">render</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;demo&#125;</span>&gt;</span>确认<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    <span class=\"comment\">// demo()表示调用demo函数的结果  这里必须是&#123;demo&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\t\n<h3 id=\"类式组件\"><a class=\"markdownIt-Anchor\" href=\"#类式组件\">#</a> 类式组件</h3>\n<p>适用于复杂组件 (有状态)</p>\n<h4 id=\"类的基础\"><a class=\"markdownIt-Anchor\" href=\"#类的基础\">#</a> 类的基础</h4>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个人类</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">    name;</span><br><span class=\"line\">    age;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">speak</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">//哪个实例对象调用speak  this就指向哪个实例对象</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.name&#125;</span>,今年<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.age&#125;</span>岁`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 创建Person实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> p1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">18</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> p2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;张三&quot;</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"title function_\">speak</span>();\t\t<span class=\"comment\">// 我叫小明,今年18岁</span></span><br><span class=\"line\">p2.<span class=\"title function_\">speak</span>();\t\t<span class=\"comment\">// 我叫张三,今年20岁</span></span><br><span class=\"line\"></span><br><span class=\"line\">p1.<span class=\"property\">speak</span>.<span class=\"title function_\">call</span>(<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&quot;王五&quot;</span>, <span class=\"number\">19</span>)); <span class=\"comment\">//this指向是call的对象</span></span><br><span class=\"line\">\t\t\t   <span class=\"comment\">// 我叫王五,今年19岁</span></span><br><span class=\"line\"><span class=\"comment\">//创建一个学生类 继承 Person</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, grade</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">super</span>(name, age);       <span class=\"comment\">// super</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">grade</span> = grade;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 学生有study方法</span></span><br><span class=\"line\">    <span class=\"title function_\">study</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`I am studying.. in <span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.grade&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> s1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Student</span>(<span class=\"string\">&quot;老六&quot;</span>,<span class=\"number\">16</span>,<span class=\"string\">&quot;高一&quot;</span>);</span><br><span class=\"line\">s1.<span class=\"title function_\">speak</span>();\t\t<span class=\"comment\">// 我叫老六,今年16岁</span></span><br><span class=\"line\">s1.<span class=\"title function_\">study</span>();\t\t<span class=\"comment\">// I am studying.. in 高一</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(p1, p2 ,s1);\t</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">Person &#123;name: &#x27;小明&#x27;, age: 18&#125; \t\t\t\t person的方法都是放在了他的原型对象上 👇👇</span></span><br><span class=\"line\"><span class=\"comment\">Person &#123;name: &#x27;张三&#x27;, age: 20&#125; \t\t\t\t 原型链:  person --&gt; Object(构造自Person 有各种属性和speak()方法)--&gt; Object(顶层对象)</span></span><br><span class=\"line\"><span class=\"comment\">Student &#123;name: &#x27;老六&#x27;, age: 16, grade: &#x27;高三&#x27;&#125;   student --[Prototype]--&gt; person(构造自Student) --[Prototype]--&gt; object(构造自Person)</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<p><strong>类中所定义的方法都是放在了类的原型对象上</strong></p>\n<ul>\n<li>原型 (prototype) 是<strong>函数的一个特殊属性</strong>，即指针指向 <code>原型对象</code> 。</li>\n<li>原型对象 (prototype object) 是一个属于其所在 <code>函数的空对象</code> ，可以<strong>添加属性和方法</strong>。其自身 constructor 属性指向其函数</li>\n</ul>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302051527500.png\" alt=\"image-20230205152741457\" style=\"zoom:80%;\" />\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302051527689.png\" alt=\"image-20230205152727659\"></p>\n<p>​\t\t每个函数都有一个 <strong>prototype</strong> 属性。所有的 JavaScript 对象都会从对应 <strong>prototype</strong>（原型对象）中<strong>继承属性和方法</strong>.</p>\n<p>如上图:<br>\nspeak () 方法是放在<strong>原型对象</strong>里的<br>\n Person (小明…) 是 <strong>实例</strong><br>\n第一个 Object 是 <strong>原型对象</strong><br>\n Person (name,age) 是 <strong>构造函数</strong></p>\n<h4 id=\"创建类式组件\"><a class=\"markdownIt-Anchor\" href=\"#创建类式组件\">#</a> 创建类式组件</h4>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;\t\t<span class=\"comment\">// 一定要继承 React.Component</span></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;\t\t\t\t\t\t\t<span class=\"comment\">//   一定要有 render()</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>我是类式定义组件,用于复杂组件<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsx&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件的-this\"><a class=\"markdownIt-Anchor\" href=\"#组件的-this\">#</a> 组件的 this</h4>\n<p><em>在组件内创建自定义方法时，this 为 undefined，如何解决？</em></p>\n<ol>\n<li>强制绑定给实例对象，使用 bind ()</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">tick</span> = <span class=\"variable language_\">this</span>.<span class=\"property\">tick</span>.<span class=\"title function_\">bind</span>(<span class=\"variable language_\">this</span>)</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>使用箭头函数</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tick = <span class=\"function\">() =&gt;</span>&#123;xxx&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组件三大属性\"><a class=\"markdownIt-Anchor\" href=\"#组件三大属性\">#</a> 组件三大属性</h3>\n<h4 id=\"state\"><a class=\"markdownIt-Anchor\" href=\"#state\">#</a> state</h4>\n<p>当组件中的一些数据在某些时刻发生变化时，这时就需要使用  <code>state</code>  来跟踪状态。</p>\n<p><code>state</code>  和  <code>props</code>  之间最重要的区别是： <code>props</code>  由父组件传入，而  <code>state</code>  由组件本身管理。组件不能修改  <code>props</code> ，但它可以修改  <code>state</code> 。</p>\n<p>​\t\t对于所有变化数据中的每个特定部分，只应该由一个组件在其 state 中 “持有” 它。不要试图同步来自于两个不同组件的 state。相反，应当将其<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZWFjdC5kb2NzY2hpbmEub3JnL2RvY3MvbGlmdGluZy1zdGF0ZS11cC5odG1s\">提升</span>到最近的共同祖先组件中，并将这个 state 作为 props 传递到两个子组件。</p>\n<p>看一个来自官方文档的 [时钟案例](<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlcGVuLmlvL0ppbGluSkwvcGVuL3JOclJMR1A/ZWRpdG9ycz0wMDEw\">Hello World in React (codepen.io)</span>)</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 创建一个类组件 基础的时钟</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">props</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(props);</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">state</span> = &#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &#125;; <span class=\"comment\">//存储着时间</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//指针方法 负责更新state存的时间</span></span><br><span class=\"line\">  <span class=\"title function_\">tick</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"title class_\">Date</span>() &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 挂载后开启计时,每秒更新一下tick</span></span><br><span class=\"line\">  <span class=\"title function_\">componentDidMount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">timer</span> = <span class=\"built_in\">setInterval</span>(<span class=\"function\">() =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"title function_\">tick</span>(), <span class=\"number\">1000</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 卸载后清除定时器</span></span><br><span class=\"line\">  <span class=\"title function_\">componentWillUnmount</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">clearInterval</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">timer</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"comment\">//render用来return的</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>现在时间<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">h2</span>&gt;</span>It is &#123;this.state.date.toLocaleTimeString()&#125; now.<span class=\"tag\">&lt;/<span class=\"name\">h2</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">      <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Clock</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsx&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p>让我们来快速概括一下发生了什么和这些方法的调用顺序：</p>\n<blockquote>\n<ol>\n<li>当  <code>&lt;Clock /&gt;</code>  被传给  <code>ReactDOM.render()</code>  的时候，React 会调用  <code>Clock</code>  组件的构造函数。因为  <code>Clock</code>  需要显示当前的时间，所以它会用一个包含当前时间的对象来初始化  <code>this.state</code> 。我们会在之后更新 state。</li>\n<li>之后 React 会调用组件的  <code>render()</code>  方法。这就是 React 确定该在页面上展示什么的方式。然后 React 更新 DOM 来匹配  <code>Clock</code>  渲染的输出。</li>\n<li>当  <code>Clock</code>  的输出被插入到 DOM 中后，React 就会调用  <code>ComponentDidMount()</code>  生命周期方法。在这个方法中， <code>Clock</code>  组件向浏览器请求设置一个计时器来每秒调用一次组件的  <code>tick()</code>  方法。</li>\n<li>浏览器每秒都会调用一次  <code>tick()</code>  方法。 在这方法之中， <code>Clock</code>  组件会通过调用  <code>setState()</code>  来计划进行一次 UI 更新。得益于  <code>setState()</code>  的调用，React 能够知道 state 已经改变了，然后会重新调用  <code>render()</code>  方法来确定页面上该显示什么。这一次， <code>render()</code>  方法中的  <code>this.state.date</code>  就不一样了，如此以来就会渲染输出更新过的时间。React 也会相应的更新 DOM。</li>\n<li>一旦  <code>Clock</code>  组件从 DOM 中被移除，React 就会调用  <code>componentWillUnmount()</code>  生命周期方法，这样计时器就停止了。</li>\n</ol>\n</blockquote>\n<h4 id=\"props\"><a class=\"markdownIt-Anchor\" href=\"#props\">#</a> props</h4>\n<p>​\t\t当 React 元素为用户自定义组件时，它会将 JSX 所接收的属性（attributes）以及子组件（children）转换为单个对象传递给组件，这个对象被称之为 “props”。</p>\n<p>props<strong> 传值语法糖</strong></p>\n<p><strong>…</strong> 展开运算符</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">         <span class=\"keyword\">const</span> p1 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Tom&#x27;</span>,<span class=\"attr\">age</span>: <span class=\"number\">17</span>,<span class=\"attr\">sex</span>: <span class=\"string\">&#x27;女&#x27;</span>&#125;</span><br><span class=\"line\">         <span class=\"keyword\">const</span> p2 = &#123;<span class=\"attr\">name</span>: <span class=\"string\">&#x27;Jack&#x27;</span>,<span class=\"attr\">age</span>: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">PersonListComponent</span>(<span class=\"params\">props</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>姓名：&#123;props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>性别：&#123;(props.sex)?props.sex:&#x27;男&#x27;&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span>  &#123;// 设置默认为男&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>年龄：&#123;props.age&#125;<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">App</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>(</span><br><span class=\"line\">        <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">PersonListComponent</span> &#123;<span class=\"attr\">...p1</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;<span class=\"name\">PersonListComponent</span> &#123;<span class=\"attr\">...p2</span>&#125; /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">    );</span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">         <span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span>/&gt;</span></span>,<span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsx&quot;</span>))</span><br></pre></td></tr></table></figure>\n<h4 id=\"refs\"><a class=\"markdownIt-Anchor\" href=\"#refs\">#</a> refs</h4>\n<p>refs 实际上用途就是把节点 node 本身传到实例对象 obj 里面使用，一般需要通过一个元素访问另一个元素时使用 ref。</p>\n<ol>\n<li>字符串 ref</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;h2 ref=<span class=\"string\">&quot;title&quot;</span>&gt;&#123;msg&#125;&lt;/h2&gt;</span><br><span class=\"line\"><span class=\"comment\">// 接收[组件]的refs属性下的title</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">title</span>);\t\t<span class=\"comment\">//  component.refs.title</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>内联 ref</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 ref=&#123;<span class=\"function\"><span class=\"params\">el</span> =&gt;</span> <span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = el&#125;&gt;&#123;msg&#125;&lt;/h2&gt;</span><br><span class=\"line\"><span class=\"comment\">// 把节点存在[组件]的title属性中  component.title</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>回调 ref</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 ref=&#123;title&#125;&gt;&#123;msg&#125;&lt;/h2&gt;</span><br><span class=\"line\">title=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123; <span class=\"variable language_\">this</span>.<span class=\"property\">title</span> = e &#125;</span><br><span class=\"line\"><span class=\"comment\">// 把节点存在[组件]的title属性中  component.title</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>创建 ref</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 ref=&#123;myRef&#125;&gt;&#123;msg&#125;&lt;/h2&gt;</span><br><span class=\"line\">myRef = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRef</span>();\t<span class=\"comment\">// 把节点存在 component.myRef 对象 &#123;current: &lt;h2&gt;&#125;</span></span><br><span class=\"line\"><span class=\"comment\">//  conponent.myRef.current = &lt;h2&gt;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"字符串-refs-即将过时\"><a class=\"markdownIt-Anchor\" href=\"#字符串-refs-即将过时\">#</a> <em>字符串 refs (即将过时)</em></h5>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    showData=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">input1</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    showData2=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">input2</span>)</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123;value&#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">refs</span>.<span class=\"property\">input2</span></span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(value)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>(</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;input1&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.showData&#125;</span>&gt;</span>点击显示左侧数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&quot;input2&quot;</span> <span class=\"attr\">onBlur</span>=<span class=\"string\">&#123;this.showData2&#125;</span> <span class=\"attr\">placeholder</span>=<span class=\"string\">&quot;失去焦点显示数据&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        )</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&#x27;jsx&#x27;</span>))</span><br></pre></td></tr></table></figure>\n<p><strong>字符串形式的 ref 中</strong>，ref 属性传值会生成标签的节点存储在实例对象 <code>Demo的refs属性中</code></p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302061011540.png\" alt=\"image-20230206101104504\"></p>\n<hr>\n<h5 id=\"回调形式-refs-推荐\"><a class=\"markdownIt-Anchor\" href=\"#回调形式-refs-推荐\">#</a> <em>回调形式 refs (推荐)</em></h5>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Demo</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    showData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">input1</span>.<span class=\"property\">value</span>);</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"variable language_\">this</span>)\t<span class=\"comment\">// this指向 Demo实例对象</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    showData2 = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> &#123; value &#125; = <span class=\"variable language_\">this</span>.<span class=\"property\">input2</span>;</span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(value);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;(e)</span>=&gt;</span>&#123;this.input1=e&#125;&#125; type=&#x27;text&#x27; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> <span class=\"attr\">onClick</span>=<span class=\"string\">&#123;this.showData&#125;</span>&gt;</span>点击显示左侧数据<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;e</span>=&gt;</span>this.input2=e&#125; onBlur=&#123;this.showData2&#125; placeholder=&#x27;失去焦点显示数据&#x27; type=&#x27;text&#x27; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">ReactDOM</span>.<span class=\"title function_\">render</span>(<span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">Demo</span> /&gt;</span></span>, <span class=\"variable language_\">document</span>.<span class=\"title function_\">getElementById</span>(<span class=\"string\">&quot;jsx&quot;</span>));</span><br></pre></td></tr></table></figure>\n<p><strong>回调形式的 ref 中</strong>，ref 传数据不会存储在实例对象 <code>Demo的refs属性中</code> ，而是 <code>直接挂载为实例对象Demo的属性</code></p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302061013640.png\" alt=\"image-20230206101333608\"></p>\n<blockquote>\n<p>特别注意官网提到的 <strong>回调 ref 执行次数</strong>的问题</p>\n<p>​\t\t如果  <code>ref</code>  回调函数是以内联函数的方式定义的，在更新过程中它会被 <code>执行两次</code> ，<em>第一次传入参数  <code>null</code> </em>，然后第二次会传入参数 DOM 元素。这是因为在每次渲染时会创建一个 <code>新的函数实例</code> ，所以 React 清空旧的 ref 并且设置新的。通过将 ref 的回调函数定义成 <em>class 的绑定函数的方式</em>可以避免上述问题，但是<strong>大多数情况下它是无关紧要的</strong>。</p>\n</blockquote>\n<p>class 绑定函数的方式</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;input ref=&#123;<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;<span class=\"variable language_\">this</span>.<span class=\"property\">input1</span>=e&#125;&#125; type=<span class=\"string\">&#x27;text&#x27;</span> /&gt;</span><br><span class=\"line\"><span class=\"comment\">// 改为</span></span><br><span class=\"line\"> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.show&#125;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">// 再在class里面创建一个函数绑定</span></span><br><span class=\"line\">..<span class=\"property\">Demo</span>&#123;</span><br><span class=\"line\">  show=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">      <span class=\"variable language_\">this</span>.<span class=\"property\">input1</span>=e</span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(e.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建-refs-最推荐v16以上\"><a class=\"markdownIt-Anchor\" href=\"#创建-refs-最推荐v16以上\">#</a> <strong>创建 Refs （最推荐，v16 以上）</strong></h5>\n<ul>\n<li>当  <code>ref</code>  属性用于 HTML 元素时，构造函数中使用  <code>React.createRef()</code>  创建的  <code>ref</code>  接收底层 DOM 元素作为其  <code>current</code>  属性。</li>\n</ul>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyComponent</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">  myRef = <span class=\"title class_\">React</span>.<span class=\"title function_\">createRefs</span>()</span><br><span class=\"line\">  showData = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"params\"><span class=\"variable language_\">this</span>.myRef</span>)  \t&#123;<span class=\"comment\">// this.myRef = &#123;current: value&#125;&#125;</span></span><br><span class=\"line\">      <span class=\"title function_\">alert</span>(<span class=\"variable language_\">this</span>.<span class=\"property\">myRef</span>.<span class=\"property\">current</span>.<span class=\"property\">value</span>)</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;this.myRef&#125;</span> /&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<p>其实仔细读读官方文档发现写得挺好的，那就先写到这里了，跟着官方文档慢慢看吧。</p>\n<h3 id=\"表单\"><a class=\"markdownIt-Anchor\" href=\"#表单\">#</a> 表单</h3>\n<p><mark>一定要学一下  <code>formik</code> </mark></p>\n<h4 id=\"非受控组件\"><a class=\"markdownIt-Anchor\" href=\"#非受控组件\">#</a> 非受控组件</h4>\n<p>​\t\t由 ref 携带表单 dom 然后获取 value 数据</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//非受控组件 现用现取</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        e.<span class=\"title function_\">preventDefault</span>(); <span class=\"comment\">//阻止表单提交</span></span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">`账号是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.username.value&#125;</span>密码是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.password.value&#125;</span>`</span>); <span class=\"comment\">//模拟使用ajax无刷新传值</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t  \t \t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;(c)</span> =&gt;</span> (this.username = c)&#125; name=&#x27;username&#x27; type=&#x27;text&#x27; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">ref</span>=<span class=\"string\">&#123;(c)</span> =&gt;</span> (this.password = c)&#125; name=&#x27;password&#x27; type=&#x27;password&#x27; /&gt;</span></span><br><span class=\"line\"><span class=\"language-xml\">    \t\t\t<span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登陆<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"受控组件\"><a class=\"markdownIt-Anchor\" href=\"#受控组件\">#</a> 受控组件</h4>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    state = &#123;<span class=\"attr\">username</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"line\">    handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        e.<span class=\"title function_\">preventDefault</span>(); <span class=\"comment\">//阻止表单提交</span></span><br><span class=\"line\">        <span class=\"title function_\">alert</span>(<span class=\"string\">`账户名是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.state.username&#125;</span>密码是<span class=\"subst\">$&#123;<span class=\"variable language_\">this</span>.state.password&#125;</span>`</span>)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    saveUsername=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">username</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    savePassword=<span class=\"function\">(<span class=\"params\">e</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;<span class=\"attr\">password</span>: e.<span class=\"property\">target</span>.<span class=\"property\">value</span>&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveUsername&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;username&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.savePassword&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;password&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;password&#x27;</span> /&gt;</span>  &#123;//利用 onChange事件实现数据驱动的单向绑定&#125;</span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登陆<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"优化\"><a class=\"markdownIt-Anchor\" href=\"#优化\">#</a> 优化</h4>\n<p>​\t\t以上例子中 saveUsername,savePassword 方法严重重复，如果还需要输入其他数据，就会变得很繁琐，将以上代码优化为:</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Login</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">React.Component</span> &#123;</span><br><span class=\"line\">    state = &#123;<span class=\"attr\">username</span>: <span class=\"string\">&#x27;&#x27;</span>, <span class=\"attr\">password</span>: <span class=\"string\">&#x27;&#x27;</span>&#125;;</span><br><span class=\"line\">    handleSubmit = <span class=\"function\">(<span class=\"params\">e</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        e.<span class=\"title function_\">preventDefault</span>(); <span class=\"comment\">//阻止表单提交</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//优化为一个函数 采用es6的计算属性名称语法</span></span><br><span class=\"line\">    saveData=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">const</span> target = event.<span class=\"property\">target</span></span><br><span class=\"line\">        <span class=\"keyword\">const</span> name = target.<span class=\"property\">name</span></span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"title function_\">setState</span>(&#123;</span><br><span class=\"line\">            [name]: target.<span class=\"property\">value</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">render</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> (</span><br><span class=\"line\">            <span class=\"language-xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">onSubmit</span>=<span class=\"string\">&#123;this.handleSubmit&#125;</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&#x27;username&#x27;</span>&gt;</span>用户名:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span>  <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveData&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;username&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;text&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">htmlFor</span>=<span class=\"string\">&#x27;password&#x27;</span>&gt;</span>密码:<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">onChange</span>=<span class=\"string\">&#123;this.saveData&#125;</span> <span class=\"attr\">name</span>=<span class=\"string\">&#x27;password&#x27;</span> <span class=\"attr\">type</span>=<span class=\"string\">&#x27;password&#x27;</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                    <span class=\"tag\">&lt;<span class=\"name\">button</span>&gt;</span>登陆<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">                <span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"language-xml\">            <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">        );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"组件生命周期\"><a class=\"markdownIt-Anchor\" href=\"#组件生命周期\">#</a> <strong>组件生命周期</strong></h4>\n<p>生命周期详细介绍参考 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTE0MTEyMTA1OTY0NjM0MTE5\">深入详解 React 生命周期</span></p>\n<p>在之前的时钟案例中用到了  <code>componentDidMount()</code>  和 <code>componentWillUnmount()</code>  就是生命周期函数.</p>\n<blockquote>\n<p>组件将要挂载时触发的函数：componentWillMount<br>\n 组件挂载完成时触发的函数：componentDidMount<br>\n 是否要更新数据时触发的函数：shouldComponentUpdate  不写默认返回 <code>true</code>  写了该函数不写返回值 则默认返回  <code>undefined</code> <br>\n 将要更新数据时触发的函数：componentWillUpdate<br>\n 数据更新完成时触发的函数：componentDidUpdate<br>\n 组件将要销毁时触发的函数：componentWillUnmount<br>\n 父组件中改变了 props 传值时触发的函数：componentWillReceiveProps   第一次加载不算，是接收 new props 才会算</p>\n</blockquote>\n<p><strong>React 旧版生命周期</strong></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302061445392.png\" alt=\"旧版生命周期\" style=\"zoom:80%;\" />\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302061540442.png\" alt=\"image-20230206154029331\" style=\"zoom:80%;\" />\n<p><strong>新版生命周期</strong></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202302061446624.png\" alt=\"新版\" style=\"zoom: 80%;\" />\n",
            "tags": [
                "JS"
            ]
        }
    ]
}