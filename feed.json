{
    "version": "https://jsonfeed.org/version/1",
    "title": "寂林的小窝",
    "description": "飒飒西风满院栽，蕊寒香冷蝶难来",
    "home_page_url": "https://jilinJL.github.io/project",
    "items": [
        {
            "id": "https://jilinjl.github.io/project/js/js-basic/JS%E5%9F%BA%E7%A1%80/",
            "url": "https://jilinjl.github.io/project/js/js-basic/JS%E5%9F%BA%E7%A1%80/",
            "title": "JS基础啦",
            "date_published": "2022-11-18T01:03:14.663Z",
            "content_html": "<h1 id=\"js基础和核心问题\"><a class=\"markdownIt-Anchor\" href=\"#js基础和核心问题\">#</a> JS 基础和核心问题</h1>\n<h3 id=\"判断数据类型\"><a class=\"markdownIt-Anchor\" href=\"#判断数据类型\">#</a> 判断数据类型</h3>\n<ol>\n<li>typeof 用于判断基本数据类型，引用数据类型和 null 都判为 object</li>\n<li>instanceof  判断实例对象的 prototype 如 a instanceof A  判断 a 是否由 A new 产生</li>\n<li>constructor 检测不出 undefined 和 null; 使用方法 str.constructor == String ； true</li>\n<li>toString.call (待测值)  toString 是 Object 原型对象的一个方法，根据原型链往上找 如函数 fn --&gt; fn._proto_(Fn.prototype) --&gt; Fn.prototype._proto_ (Object.prototype)</li>\n<li>jQuery 内置的方法</li>\n</ol>\n<p><img data-src=\"C:%5CUsers%5Cjilin%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20221113214240160.png\" alt=\"image-20221113214240160\"></p>\n<h3 id=\"浅拷贝vs深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#浅拷贝vs深拷贝\">#</a> 浅拷贝 vs 深拷贝</h3>\n<p><mark>浅拷贝</mark>只拷贝一层，实际上指向同一个地址；</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> newArr = [...oldArr]</span><br></pre></td></tr></table></figure>\n<p><mark>深拷贝</mark>拷贝全部，将数组内的对象也拷贝，开辟了新地址；</p>\n<p>// 四种深拷贝<br>\n 1. 递归         \t\t\t<br>\n2.Object.create()<br>\n 3.jQuery 的 $.extend<br>\n4. 导入 lodash 使用 cloneDeep</p>\n<h4 id=\"递归实现深拷贝\"><a class=\"markdownIt-Anchor\" href=\"#递归实现深拷贝\">#</a> 递归实现深拷贝</h4>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//递归实现深拷贝</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> oldObj=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;jilin&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">hobby</span>: [<span class=\"string\">&#x27;game&#x27;</span>,<span class=\"string\">&#x27;sleep&#x27;</span>,<span class=\"string\">&#x27;eat&#x27;</span>],</span><br><span class=\"line\">    <span class=\"attr\">skill</span>:&#123;</span><br><span class=\"line\">        <span class=\"attr\">name</span>: <span class=\"string\">&#x27;LOL&#x27;</span>,</span><br><span class=\"line\">        <span class=\"attr\">rank</span>: <span class=\"string\">&#x27;Gold II&#x27;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//let newObj = oldObj;</span></span><br><span class=\"line\"><span class=\"comment\">//oldObj.name = &#x27;123&#x27;  浅拷贝 修改原对象的值，新对象也变了</span></span><br><span class=\"line\"><span class=\"comment\">//console.log(newObj); </span></span><br><span class=\"line\"><span class=\"comment\">//********以下为深拷贝***********</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">deepCopy</span>(<span class=\"params\">object</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> newObj = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Object</span>) &#123;</span><br><span class=\"line\">        newObj = &#123;&#125;;        <span class=\"comment\">//检测到为Object类型</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> key <span class=\"keyword\">in</span> object) &#123;</span><br><span class=\"line\">            newObj[key] = <span class=\"title function_\">deepCopy</span>(object[key]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (object <span class=\"keyword\">instanceof</span> <span class=\"title class_\">Array</span>) &#123;</span><br><span class=\"line\">        newObj = [];        <span class=\"comment\">//检测到为Array类型</span></span><br><span class=\"line\">        object.<span class=\"title function_\">forEach</span>(<span class=\"function\">(<span class=\"params\">item</span>) =&gt;</span> &#123;</span><br><span class=\"line\">            newObj = <span class=\"title function_\">deepCopy</span>(item);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        newObj = object;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> newObj;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> myNewObj = <span class=\"title function_\">deepCopy</span>(oldObj);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(myNewObj);</span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">&#123;</span></span><br><span class=\"line\"><span class=\"comment\">  name: &#x27;jilin&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">  hobby: &#123; &#x27;0&#x27;: &#x27;game&#x27;, &#x27;1&#x27;: &#x27;sleep&#x27;, &#x27;2&#x27;: &#x27;eat&#x27; &#125;,</span></span><br><span class=\"line\"><span class=\"comment\">  skill: &#123; name: &#x27;LOL&#x27;, rank: &#x27;Gold II&#x27; &#125;</span></span><br><span class=\"line\"><span class=\"comment\">&#125;</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"闭包\"><a class=\"markdownIt-Anchor\" href=\"#闭包\">#</a> 闭包</h3>\n<p><strong>在函数内调用函数外部的变量，创建私有变量</strong></p>\n<ul>\n<li>\n<p>手写一个闭包，能记录函数调用的次数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`调用了<span class=\"subst\">$&#123;i&#125;</span>次`</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"keyword\">new</span> <span class=\"title class_\">Fn</span>()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了1次&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了2次&quot;</span></span><br><span class=\"line\"><span class=\"title function_\">f</span>();  <span class=\"comment\">//&gt; &quot;调用了3次&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">f = <span class=\"literal\">null</span> <span class=\"comment\">//利用标记清除 回收内存</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>原理：</strong> 函数在作用找不到变量，顺着父级作用域往上找。 函数作用域只与创建时的位置有关，和调用时无关，如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"string\">&quot;全局变量a&quot;</span></span><br><span class=\"line\">fn1=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn2=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> a = <span class=\"string\">&quot;fn2中的a&quot;</span></span><br><span class=\"line\">    <span class=\"title function_\">fn1</span>()    <span class=\"comment\">//虽然调用位置在这里 但是创建的作用域 </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>();  <span class=\"comment\">//&quot;全局变量a&quot;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"完全理解-callapplybind\"><a class=\"markdownIt-Anchor\" href=\"#完全理解-callapplybind\">#</a> 完全理解 call (),apply (),bind ()</h3>\n<p><strong>三者都用于改变函数传参和 this 指向，注意 <em>箭头函数</em> 无法改变 this</strong></p>\n<p><code>fn.call('新的this对象','参数1','参数2','参数3'..)</code> <br>\n <code>fn.apply(''新的this对象',['参数1','参数2','参数3'])</code> <br>\n <code>fn.bind('新的this对象','参数1','参数2','参数3'..)() //bind返回的是一个新的函数,传参成为固定参数</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">oldFn</span>(<span class=\"params\">a,b</span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> sum = a+b</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(sum,<span class=\"variable language_\">this</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> obj=&#123; <span class=\"attr\">name</span>:<span class=\"string\">&#x27;对象&#x27;</span> &#125;</span><br><span class=\"line\"><span class=\"title function_\">oldFn</span>(<span class=\"number\">2</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">oldFn.<span class=\"title function_\">call</span>(obj,<span class=\"number\">2</span>,<span class=\"number\">2</span>)  <span class=\"comment\">//this指向obj  传参2，2</span></span><br><span class=\"line\">oldFn.<span class=\"title function_\">apply</span>(obj,[<span class=\"number\">1</span>,<span class=\"number\">3</span>]) <span class=\"comment\">//this指向obj 传参1，3</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> bindFn=oldFn.<span class=\"title function_\">bind</span>(obj,<span class=\"number\">0</span>,<span class=\"number\">4</span>) <span class=\"comment\">//this指向obj  绑定参数为0和4</span></span><br><span class=\"line\"><span class=\"title function_\">bindFn</span>() <span class=\"comment\">//相当于执行了o</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"暂时性死区\"><a class=\"markdownIt-Anchor\" href=\"#暂时性死区\">#</a> 暂时性死区</h3>\n<p>一句话：<strong>一进入当前作用域，变量就已经存在了，但不可获取，只有等到声明后才能获取和使用</strong>，作用是<strong>防止在变量声明前就使用，减少运行时的错误</strong></p>\n<p>var 存在变量提升，所以声明前访问，返回 undefined 而不报错</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn1</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a)\t</span><br><span class=\"line\">    <span class=\"keyword\">var</span> a = <span class=\"number\">1</span>\t\t<span class=\"comment\">//变量提升</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">fn2</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b)\t<span class=\"comment\">// </span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> b = <span class=\"number\">1</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn1</span>()\t<span class=\"comment\">//undefined</span></span><br><span class=\"line\"><span class=\"title function_\">fn2</span>()\t<span class=\"comment\">//ReferenceError</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"javascript执行机制事件循环\"><a class=\"markdownIt-Anchor\" href=\"#javascript执行机制事件循环\">#</a> JavaScript 执行机制 —— 事件循环</h3>\n<h4 id=\"异步\"><a class=\"markdownIt-Anchor\" href=\"#异步\">#</a> 异步？</h4>\n<p>​\t<strong>JavaScript 是一门单线程语言，没有异步，一切异步都是以同步的方法模拟的！</strong></p>\n<h4 id=\"事件循环event-loop\"><a class=\"markdownIt-Anchor\" href=\"#事件循环event-loop\">#</a> 事件循环 Event Loop</h4>\n<p>​\t  event loop 它最主要是分三部分：<strong>主线程、宏队列（macrotask）、微队列（microtask）</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;1&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;2&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;3&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;4&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;5&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;6&#x27;</span>);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;7&#x27;</span>);</span><br><span class=\"line\">    <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">&#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;8&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;9&#x27;</span>);</span><br><span class=\"line\">    process.<span class=\"title function_\">nextTick</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;10&#x27;</span>);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"keyword\">function</span>(<span class=\"params\">resolve</span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;11&#x27;</span>);</span><br><span class=\"line\">        <span class=\"title function_\">resolve</span>();</span><br><span class=\"line\">    &#125;).<span class=\"title function_\">then</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;12&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"><span class=\"comment\">// 1 7 6 8 | 2 4 3 5 | 9 11 10 12</span></span><br><span class=\"line\">第一轮事件循环  第二轮     第三轮</span><br></pre></td></tr></table></figure>\n<p>** 宏任务（Macrotasks）：**js 同步执行的代码块，setTimeout、setInterval、XMLHttprequest、setImmediate、I/O、UI rendering 等。</p>\n<p>** 微任务（Microtasks）：**promise、process.nextTick（node 环境）、Object.observe, MutationObserver 等。</p>\n<blockquote>\n<p>浏览器在执行 js 代码过程中会维护一个<strong>执行栈</strong>，每个方法都会进栈执行之后然后出栈（FIFO）。与此同时，浏览器又维护了一个消息队列，所有的异步方法，在执行结束后都会将回调方法塞入<strong>消息队列</strong>中，当所有执行栈中的任务全部执行完毕后，浏览器开始往消息队列寻找任务，先进入消息队列的任务先执行。</p>\n</blockquote>\n<p><strong>执行完一次宏任务后，检查任务队列微任务，执行完后进入下一次宏任务执行</strong></p>\n<p><strong>宏任务和微任务的总结：</strong> 宏任务 Macrotasks 就是参与了事件循环的异步任务。 微任务 Microtasks 就是没有参与事件循环的 “异步” 任务。</p>\n<p><img data-src=\"https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2020/1/14/16fa17e343d9383f~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp\" alt=\"事件循环\"></p>\n<h4 id=\"node环境的js执行机制\"><a class=\"markdownIt-Anchor\" href=\"#node环境的js执行机制\">#</a> Node 环境的 JS 执行机制</h4>\n<p>​\t\tnode 环境下 js 事件循环机制与 浏览器环境下有出入，不过随着 node 版本的更新，正在不断规范。</p>\n<p>nod 执行栈 -&gt; 宏任务 -&gt; 宏任务 -&gt; 微任务 -&gt; 微任务</p>\n<p>浏览器环境：执行栈 -&gt; 宏任务 -&gt; 微任务 -&gt; 宏任务 -&gt; 微任务</p>\n",
            "tags": [
                "JS,es6"
            ]
        },
        {
            "id": "https://jilinjl.github.io/project/html-css/2.%E5%86%8D%E4%BC%9ACSS%E5%B8%83%E5%B1%80/",
            "url": "https://jilinjl.github.io/project/html-css/2.%E5%86%8D%E4%BC%9ACSS%E5%B8%83%E5%B1%80/",
            "title": "CSS的布局知识",
            "date_published": "2022-11-18T01:03:02.863Z",
            "content_html": "<h1 id=\"css布局\"><a class=\"markdownIt-Anchor\" href=\"#css布局\">#</a> <strong>CSS 布局</strong></h1>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180906847.png\" alt=\"页面布局\"></p>\n<h2 id=\"1流式布局\"><a class=\"markdownIt-Anchor\" href=\"#1流式布局\">#</a> 1. 流式布局</h2>\n<blockquote>\n<p>在 body 中 每个块级元素依次排列 每个块级元素占满 width</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180906476.png\" alt=\"流式\"></p>\n</blockquote>\n<h2 id=\"2浮动布局-float\"><a class=\"markdownIt-Anchor\" href=\"#2浮动布局-float\">#</a> 2. 浮动布局 (float)</h2>\n<blockquote>\n<p>给块级元素设置 Float 属性</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180906438.png\" alt=\"0.0\"></p>\n</blockquote>\n<h3 id=\"高度塌陷和bfc\"><a class=\"markdownIt-Anchor\" href=\"#高度塌陷和bfc\">#</a> 高度塌陷和 BFC</h3>\n<blockquote>\n<p><strong>注意：</strong> 子元素都为 float 时，可能造成父元素<mark>高度塌陷</mark>，需要清除浮动</p>\n<ol>\n<li>\n<p>给父元素加高度</p>\n</li>\n<li>\n<p>补充块级空标签，给他加 clear 属性</p>\n</li>\n<li>\n<p>创建<mark> BFC</mark></p>\n<p><mark>BFC（Block Formatting Context）</mark>，BFC 全称是块级格式化上下文，用于对块级元素排版，默认情况下只有根元素（body）一个块级上下文，但是如果一个块级元素设置了<strong> float:left,overflow:hidden 或 position:absolute</strong> 样式，就会为这个块级元素生产一个独立的块级上下文，使这个块级元素内部的排版完全独立。也就是说独立的块级上下文可以包裹浮动流，全部浮动子元素也不会引起容器高度塌陷，就是说包含块会把浮动元素的高度也计算在内，这样就达到了清除浮动的效果，但是 overflow:hidden 本身的意思是溢出的元素隐藏显示，所以说有一定的缺点，大家可以根据情况来使用它。</p>\n</li>\n<li>\n<p>父元素添加:after 伪类  加上 content: “”;</p>\n</li>\n</ol>\n</blockquote>\n<p><strong>如何创建 BFC</strong></p>\n<p>1、float 的值不是 none。<br>\n2、position 的值不是 static 或者 relative。<br>\n3、display 的值是 inline-block、table-cell、flex、table-caption 或者 inline-flex<br>\n4、overflow 的值不是 visible</p>\n<h2 id=\"3五个定位布局position\"><a class=\"markdownIt-Anchor\" href=\"#3五个定位布局position\">#</a> 3. 五个定位布局（position）</h2>\n<ol>\n<li>static  静态</li>\n<li>relative  相对</li>\n<li>absolute  绝对</li>\n<li>fixed  固定</li>\n<li>sticky  粘性</li>\n</ol>\n<ul>\n<li>\n<h3 id=\"static\"><a class=\"markdownIt-Anchor\" href=\"#static\">#</a> <mark>static</mark></h3>\n<p>默认定位，遵循从上到下，从左到右</p>\n</li>\n<li>\n<h3 id=\"relative\"><a class=\"markdownIt-Anchor\" href=\"#relative\">#</a> <mark>relative</mark></h3>\n<p>相对定位，相对块元素自己本身的位置偏移，但本质位置不变，不会挤占</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180906768.png\" alt=\"image-20221111145141285\"></p>\n</li>\n<li>\n<h3 id=\"absolute\"><a class=\"markdownIt-Anchor\" href=\"#absolute\">#</a> <mark>absolute</mark></h3>\n<p>绝对定位，元素会脱离文档流，其他元素会挤占其空间，本体元素会在挤占它的元素的上方，它的偏移 (left,right… 是相对于它的最近的有 position 的父级元素)——<mark> 子绝父相</mark> 。</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907431.png\" alt=\"image-20221111145625497\"></p>\n<p><strong>后定义的 absolute 元素会覆盖在先定义的 absolute 元素之上。</strong></p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907089.png\" alt=\"image-20221111150033923\"></p>\n</li>\n<li>\n<h3 id=\"fixed\"><a class=\"markdownIt-Anchor\" href=\"#fixed\">#</a> <mark>fixed</mark></h3>\n<p>固定定位，fixed 和 absolute 这种脱离文档流的定位，会把<strong>元素的宽和高</strong>设置为<strong>内容的宽和高</strong>，<strong>可以设置元素的 left:0; right:0; 使元素左右占满页面。</strong></p>\n</li>\n<li>\n<h3 id=\"sticky\"><a class=\"markdownIt-Anchor\" href=\"#sticky\">#</a> <mark>sticky</mark></h3>\n<p>粘性定位，使元素正常情况下是 relative 定位，但是当滑动页面时，元素接触到页面边界时，变成 fixed 固定在位置；</p>\n</li>\n</ul>\n<p><mark>z-index</mark></p>\n<blockquote>\n<p>表示元素的 z 轴值，值越大越在上层，能覆盖值小的元素</p>\n</blockquote>\n<h2 id=\"4displayvisibility\"><a class=\"markdownIt-Anchor\" href=\"#4displayvisibility\">#</a> 4.display&amp;visibility</h2>\n<ol>\n<li>\n<p>display: <mark>none</mark>; 隐藏</p>\n<p>设置为 none 的元素直接消失，不会占据空间，不在文档流中。</p>\n<p>与 visibility 有区别，设置 visibility: hidden; 元素不可见，但占据空间。</p>\n</li>\n<li>\n<p>display:<mark>inline</mark>; 行级元素</p>\n<p>a. 多个元素占一行</p>\n<p>b. 不能设置宽高</p>\n</li>\n<li>\n<p>display:<mark>block</mark>; 块级元素</p>\n<p>a. 独占一行</p>\n<p>b. 可以设置宽和高</p>\n</li>\n<li>\n<p>display: <mark>inline-block</mark>; 行级块元素</p>\n<p>a. 多个元素占一行</p>\n<p>b. 可以设置宽高</p>\n</li>\n</ol>\n<h2 id=\"5盒子模型box-model\"><a class=\"markdownIt-Anchor\" href=\"#5盒子模型box-model\">#</a> 5. 盒子模型 (Box Model)</h2>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907199.png\" alt=\"image-20221111152644800\"></p>\n<ol>\n<li>\n<p>box-sizing: content-box （默认）</p>\n<p>width = content 的宽度</p>\n</li>\n<li>\n<p>box-sizing: border-box</p>\n<p>width = content + border + padding</p>\n</li>\n</ol>\n<h2 id=\"6flex布局\"><a class=\"markdownIt-Anchor\" href=\"#6flex布局\">#</a> 6.Flex 布局</h2>\n<ol>\n<li><strong>display: flex</strong></li>\n</ol>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907468.png\" alt=\"image-20221111154459120\" style=\"zoom: 50%;\" />\n<p><strong>给父元素设置 flex 布局，父元素内的所有子元素会沿主轴从左到右依次排列</strong></p>\n<ol start=\"2\">\n<li>**justify-content ** 用于改变主轴方向的布局</li>\n</ol>\n<p>​\t<mark>居中</mark></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907732.png\" alt=\"image-20221111154832120\" style=\"zoom: 50%;\" />\n<p><mark>平分空间</mark></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907036.png\" alt=\"image-20221111154907089\" style=\"zoom: 50%;\" />\n<p><mark>两端对齐</mark></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907767.png\" alt=\"image-20221111155050621\" style=\"zoom:50%;\" />\n<ol start=\"3\">\n<li>\n<p><strong>align-items</strong> 改变交叉轴方向的布局</p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180907048.png\" alt=\"image-20221111160016420\" style=\"zoom: 50%;\" />\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180908599.png\" alt=\"image-20221111160044859\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p><strong>flex-direction: column</strong> 列模式–交叉轴变主轴，主轴变交叉轴</p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180908596.png\" alt=\"image-20221111160136427\" style=\"zoom:50%;\" />\n</li>\n<li>\n<p>子元素占比，设置子元素的 Flex 的值，调整子元素占比</p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180908325.png\" alt=\"image-20221111160221172\" style=\"zoom:50%;\" />\n</li>\n</ol>\n<h2 id=\"7grid布局\"><a class=\"markdownIt-Anchor\" href=\"#7grid布局\">#</a> 7.Grid 布局</h2>\n<p><strong>display: grid</strong></p>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180908881.png\" alt=\"image-20221111163642964\" style=\"zoom:50%;\" />\n<p><strong>给父元素设置 grid 布局，父元素内的所有子元素会按照 grid 布局排列</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">/* 声明列的宽度,数字3表示的重复3次，即有3列宽度为200px*/</span></span><br><span class=\"line\">   <span class=\"attribute\">grid-template-columns</span>: <span class=\"built_in\">repeat</span>(<span class=\"number\">3</span>,<span class=\"number\">200px</span>);</span><br><span class=\"line\">   <span class=\"comment\">/* 分别表示两行的高度 */</span></span><br><span class=\"line\">   <span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">100px</span> <span class=\"number\">200px</span>;</span><br><span class=\"line\"><span class=\"comment\">/* 设置网格间距 grid-gap*/</span></span><br><span class=\"line\"><span class=\"attribute\">grid-gap</span>: <span class=\"number\">10px</span>;</span><br><span class=\"line\"><span class=\"comment\">/* grid布局专用单位 fr 类似flex布局中的Flex=n;  使排版1：2：1 */</span></span><br><span class=\"line\">\t<span class=\"attribute\">grid-template-rows</span>: <span class=\"number\">1</span>fr <span class=\"number\">2</span>fr <span class=\"number\">1</span>fr;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8响应式布局\"><a class=\"markdownIt-Anchor\" href=\"#8响应式布局\">#</a> 8. 响应式布局</h2>\n<ol>\n<li>\n<h3 id=\"mediaquery-媒体查询\"><a class=\"markdownIt-Anchor\" href=\"#mediaquery-媒体查询\">#</a> MediaQuery 媒体查询</h3>\n</li>\n</ol>\n<blockquote>\n<p>​\tmin-width  可视宽度</p>\n<p>​\tmin-device-width 设备宽度（只与设备本身有关）</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-width</span>: <span class=\"number\">340px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-width</span>: <span class=\"number\">768px</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*样式*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*样式*/</span></span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"keyword\">@media</span> screen <span class=\"keyword\">and</span> (<span class=\"attribute\">min-device-width</span>: <span class=\"number\">340px</span>) <span class=\"keyword\">and</span> (<span class=\"attribute\">max-device-width</span>: <span class=\"number\">768px</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*样式*/</span></span><br><span class=\"line\">    <span class=\"comment\">/*样式*/</span></span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n<h3 id=\"2自适应布局\"><a class=\"markdownIt-Anchor\" href=\"#2自适应布局\">#</a> 2. 自适应布局</h3>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获取设备信息</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> userAgent = navigator.<span class=\"property\">userAgent</span>.<span class=\"title function_\">toLowerCase</span>();</span><br><span class=\"line\"><span class=\"comment\">//正则表达式，判断设备类型</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> device = <span class=\"regexp\">/ipad|iphone|midp|rv:1.2.3.4|android/</span>;</span><br><span class=\"line\"><span class=\"keyword\">if</span> (device.<span class=\"title function_\">test</span>(userAgent))&#123;</span><br><span class=\"line\">    <span class=\"comment\">//匹配到则跳转移动端页面</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;move.html&quot;</span>;</span><br><span class=\"line\">&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//跳转PC页面</span></span><br><span class=\"line\">    <span class=\"variable language_\">window</span>.<span class=\"property\">location</span>.<span class=\"property\">href</span>=<span class=\"string\">&quot;pc.html&quot;</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "css"
            ]
        },
        {
            "id": "https://jilinjl.github.io/project/html-css/1.HTML%E7%9A%84%E5%8F%A6%E4%B8%80%E9%9D%A2/",
            "url": "https://jilinjl.github.io/project/html-css/1.HTML%E7%9A%84%E5%8F%A6%E4%B8%80%E9%9D%A2/",
            "title": "HTML-梦开始的地方",
            "date_published": "2022-11-18T01:03:02.856Z",
            "content_html": "<h3 id=\"1关于表单验证\"><a class=\"markdownIt-Anchor\" href=\"#1关于表单验证\">#</a> 1. 关于表单验证</h3>\n<p>1、required 设置表单必填</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180909420.png\" alt=\"image-20221110102046922\"></p>\n<p>2、pattern 设置正则</p>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180909142.png\" alt=\"image-20221110103505753\"></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 正则表达式 pattern--&gt;</span><br><span class=\"line\">&lt;!-- 输入学号 必须是以<span class=\"selector-attr\">[S]</span>或者<span class=\"selector-attr\">[T]</span>开头(学生或者老师) + <span class=\"selector-attr\">[12位数字]</span> 组成 --&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">label</span> for=&quot;id&quot;&gt;学号：&lt;/<span class=\"selector-tag\">label</span>&gt;</span><br><span class=\"line\">&lt;<span class=\"selector-tag\">input</span> id=&quot;idnum&quot; type=&quot;text&quot; name=&#x27;id&#x27; pattern=&quot;^<span class=\"selector-attr\">[ST]</span>\\d&#123;<span class=\"number\">12</span>&#125;&quot; required&gt;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th>\\</th>\n<th>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“\\\\n” 匹配 \\n。“\\n” 匹配换行符。序列 “\\\\” 匹配 “\\” 而 “\\(” 则匹配 “(”。</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>匹配输入字符串的开始位置。</td>\n</tr>\n<tr>\n<td>$</td>\n<td>匹配输入字符串的结束位置。</td>\n</tr>\n<tr>\n<td>*</td>\n<td>匹配前面的子表达式零次或多次 (大于等于 0 次)。例如，zo * 能匹配 “z”，“zo” 以及 “zoo”。* 等价于 {0,}。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配前面的子表达式一次或多次 (大于等于 1 次）。例如，“zo+” 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配前面的子表达式零次或一次。例如，“do (es)?” 可以匹配 “does” 或 “does” 中的 “do”。? 等价于 {0,1}。</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>n 是一个非负整数。匹配确定的 n 次。例如，“o {2}” 不能匹配 “Bob” 中的 “o”，但是能匹配 “food” 中的两个 o。</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>n 是一个非负整数。至少匹配 n 次。例如，“o {2,}” 不能匹配 “Bob” 中的 “o”，但能匹配 “foooood” 中的所有 o。“o {1,}” 等价于 “o+”。“o {0,}” 则等价于 “o*”。</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>m 和 n 均为非负整数，其中 n&lt;=m。最少匹配 n 次且最多匹配 m 次。例如，“o {1,3}” 将匹配 “fooooood” 中的前三个 o。“o {0,1}” 等价于 “o?”。请注意在逗号和两个数之间不能有空格。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>当该字符紧跟在任何一个其他限制符（*,+,?，{n}，{n,}，{n,m}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串 “oooo”，“o+?” 将匹配单个 “o”，而 “o+” 将匹配所有 “o”。</td>\n</tr>\n<tr>\n<td>. 点</td>\n<td>匹配除 “\\n” 之外的任何单个字符。要匹配包括 “\\n” 在内的任何字符，请使用像 “[\\s\\S]” 的模式。</td>\n</tr>\n<tr>\n<td>(pattern)</td>\n<td>匹配 pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，在 VBScript 中使用 SubMatches 集合，在 JScript 中则使用 $0…$9 属性。要匹配圆括号字符，请使用 “” 或 “” 或 “”。</td>\n</tr>\n<tr>\n<td>(?:pattern)</td>\n<td>匹配 pattern 但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符 “(|)” 来组合一个模式的各个部分是很有用。例如 “industr (?:y|ies)” 就是一个比 “industry|industries” 更简略的表达式。</td>\n</tr>\n<tr>\n<td>(?=pattern)</td>\n<td>正向肯定预查，在任何匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“Windows (?=95|98|NT|2000)” 能匹配 “Windows2000” 中的 “Windows”，但不能匹配 “Windows3.1” 中的 “Windows”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td>\n</tr>\n<tr>\n<td>(?!pattern)</td>\n<td>正向否定预查，在任何不匹配 pattern 的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如 “Windows (?!95|98|NT|2000)” 能匹配 “Windows3.1” 中的 “Windows”，但不能匹配 “Windows2000” 中的 “Windows”。</td>\n</tr>\n<tr>\n<td>(?&lt;=pattern)</td>\n<td>反向肯定预查，与正向肯定预查类似，只是方向相反。例如，“(?&lt;=95|98|NT|2000) Windows” 能匹配 “2000Windows” 中的 “Windows”，但不能匹配 “3.1Windows” 中的 “Windows”。</td>\n</tr>\n<tr>\n<td>(?&lt;!pattern)</td>\n<td>反向否定预查，与正向否定预查类似，只是方向相反。例如 “(?&lt;!95|98|NT|2000) Windows” 能匹配 “3.1Windows” 中的 “Windows”，但不能匹配 “2000Windows” 中的 “Windows”。</td>\n</tr>\n<tr>\n<td>x|y</td>\n<td>匹配 x 或 y。例如，“z|food” 能匹配 “z” 或 “food”。“(z|f) ood” 则匹配 “zood” 或 “food”。</td>\n</tr>\n<tr>\n<td>[xyz]</td>\n<td>字符集合。匹配所包含的任意一个字符。例如，“[abc]” 可以匹配 “plain” 中的 “a”。</td>\n</tr>\n<tr>\n<td>[^xyz]</td>\n<td>负值字符集合。匹配未包含的任意字符。例如，“[^abc]” 可以匹配 “plain” 中的 “plin”。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>字符范围。匹配指定范围内的任意字符。例如，“[a-z]” 可以匹配 “a” 到 “z” 范围内的任意小写字母字符。 注意：只有连字符在字符组内部时，并且出两个字符之间时，才能表示字符的范围；如果出字符组的开头，则只能表示连字符本身.</td>\n</tr>\n<tr>\n<td>[^a-z]</td>\n<td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“[^a-z]” 可以匹配任何不在 “a” 到 “z” 范围内的任意字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“er\\b” 可以匹配 “never” 中的 “er”，但不能匹配 “verb” 中的 “er”。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。“er\\B” 能匹配 “verb” 中的 “er”，但不能匹配 “never” 中的 “er”。</td>\n</tr>\n<tr>\n<td>\\cx</td>\n<td>匹配由 x 指明的控制字符。例如，\\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 “c” 字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>匹配一个数字字符。等价于 [0-9]。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配一个非数字字符。等价于 [^0-9]。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>匹配一个换页符。等价于 \\x0c 和 \\cL。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>匹配一个换行符。等价于 \\x0a 和 \\cJ。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>匹配一个回车符。等价于 \\x0d 和 \\cM。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [\\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>匹配一个制表符。等价于 \\x09 和 \\cI。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>匹配一个垂直制表符。等价于 \\x0b 和 \\cK。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配包括下划线的任何单词字符。等价于 “[A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配任何非单词字符。等价于 “[^A-Za-z0-9_]”。</td>\n</tr>\n<tr>\n<td>\\xn</td>\n<td>匹配 n，其中 n 为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“\\x41” 匹配 “A”。“\\x041” 则等价于 “\\x04&amp;1”。正则表达式中可以使用 ASCII 编码。</td>\n</tr>\n<tr>\n<td>\\num</td>\n<td>匹配 num，其中 num 是一个正整数。对所获取的匹配的引用。例如，“(.)\\1” 匹配两个连续的相同字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\n 之前至少 n 个获取的子表达式，则 n 为向后引用。否则，如果 n 为八进制数字（0-7），则 n 为一个八进制转义值。</td>\n</tr>\n<tr>\n<td>\\nm</td>\n<td>标识一个八进制转义值或一个向后引用。如果 \\nm 之前至少有 nm 个获得子表达式，则 nm 为向后引用。如果 \\nm 之前至少有 n 个获取，则 n 为一个后跟文字 m 的向后引用。如果前面的条件都不满足，若 n 和 m 均为八进制数字（0-7），则 \\nm 将匹配八进制转义值 nm。</td>\n</tr>\n<tr>\n<td>\\nml</td>\n<td>如果 n 为八进制数字（0-7），且 m 和 l 均为八进制数字（0-7），则匹配八进制转义值 nml。</td>\n</tr>\n<tr>\n<td>\\un</td>\n<td>匹配 n，其中 n 是一个用四个十六进制数字表示的 Unicode 字符。例如，\\u00A9 匹配版权符号（©）。</td>\n</tr>\n<tr>\n<td>&lt; &gt;</td>\n<td>匹配词（word）的开始（&lt;）和结束（&gt;）。例如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTYlQUQlQTMlRTUlODglOTklRTglQTElQTglRTglQkUlQkUlRTUlQkMlOEYmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">正则表达式</span> &lt;the&gt; 能够匹配字符串 &quot;for the wise&quot; 中的 &quot;the&quot;，但是不能匹配字符串 &quot;otherwise&quot; 中的 &quot;the&quot;。注意：这个元字符不是所有的软件都支持的。</td>\n</tr>\n<tr>\n<td></td>\n<td>将 和和 之间的表达式定义为 “组”（group），并且将匹配这个表达式的字符保存到一个临时区域（一个正则表达式中最多可以保存 9 个），它们可以用 \\1 到 \\9 的符号来引用。</td>\n</tr>\n<tr>\n<td>|</td>\n<td>将两个匹配条件进行逻辑 “或”（Or）运算。例如正则表达式 (him|her) 匹配 &quot;it belongs to him&quot; 和 &quot;it belongs to her&quot;，但是不能匹配 &quot;it belongs to them.&quot;。注意：这个元字符不是所有的软件都支持的。</td>\n</tr>\n<tr>\n<td>+</td>\n<td>匹配 1 或多个正好在它之前的那个字符。例如正则表达式 9 + 匹配 9、99、999 等。注意：这个元字符不是所有的软件都支持的。</td>\n</tr>\n<tr>\n<td>?</td>\n<td>匹配 0 或 1 个正好在它之前的那个字符。注意：这个元字符不是所有的软件都支持的。</td>\n</tr>\n<tr>\n<td i,j=\"\">{i}</td>\n<td>匹配指定数目的字符，这些字符是在它之前的表达式定义的。例如正则表达式 A<span 3=\"\">0-9</span> 能够匹配字符 &quot;A&quot; 后面跟着正好 3 个数字字符的串，例如 A123、A348 等，但是不匹配 A1234。而正则表达式<span 4,6=\"\"> 0-9</span> 匹配连续的任意 4 个、5 个或者 6 个数字</td>\n</tr>\n</tbody>\n</table>\n<p>3、novalidate、formnovalidate 设置了必填，但提交时不验证</p>\n<p>4、约束验证 API</p>\n<p><mark>1.</mark> validate 属性</p>\n<p>可以设置表单验证详细属性 documentXXX.validate ()</p>\n<p>5. 美化表单</p>\n<p>主要用到大量伪类选择器：</p>\n<ol>\n<li>\n<p>input:required  给必填项加样式</p>\n</li>\n<li>\n<p>input:optional  给可选项加样式</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 给必填框加红色标识  给可选栏加绿色标识*/</span></span><br><span class=\"line\">\t\t<span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:required</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">border-right</span>: <span class=\"number\">4px</span> red solid;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"selector-tag\">input</span><span class=\"selector-pseudo\">:optional</span>&#123;</span><br><span class=\"line\">            <span class=\"attribute\">border-right</span>: <span class=\"number\">4px</span> green solid;</span><br><span class=\"line\">        &#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180909540.png\" alt=\"image-20221111094524407\"></p>\n</li>\n<li>\n<p>hover、focus 等常见状态样式</p>\n</li>\n<li>\n<p><mark>valid invalid</mark> 对应是否满足格式的不同情况</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-class\">.inputEmail</span><span class=\"selector-pseudo\">:valid</span>+<span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;✔您输入的邮箱正确！&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">input</span><span class=\"selector-class\">.inputEmail</span><span class=\"selector-pseudo\">:invalid</span>+<span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">:after</span>&#123;</span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;✖您输入的邮箱错误！&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180909290.png\" alt=\"image-20221110163629605\"></p>\n</li>\n</ol>\n<p><img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211180909354.png\" alt=\"image-20221110163642415\"></p>\n<h3 id=\"2搜索引擎优化seo\"><a class=\"markdownIt-Anchor\" href=\"#2搜索引擎优化seo\">#</a> 2. 搜索引擎优化 SEO</h3>\n<blockquote>\n<ol>\n<li>非修饰图片一定要加 alt 属性</li>\n<li>h1 标签言简意赅，整个网页尽量只出现一次</li>\n<li>meta 中的 description 优化</li>\n</ol>\n</blockquote>\n",
            "tags": [
                "html"
            ]
        },
        {
            "id": "https://jilinjl.github.io/project/js/design-patterns/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "url": "https://jilinjl.github.io/project/js/design-patterns/JS%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",
            "title": "JS设计模式",
            "date_published": "2022-11-17T16:20:03.492Z",
            "content_html": "<h1 id=\"javascript中的设计模式\"><a class=\"markdownIt-Anchor\" href=\"#javascript中的设计模式\">#</a> JavaScript 中的设计模式</h1>\n<h2 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h2>\n<p>​\t\t设计模式，往往是软件设计中的最佳实践，是前人对问题的解决经验的总结。我认为学习并理解设计模式，对自己的程序设计，软件开发有很大帮助，同时也可以扩展自己开发设计的思维。我是后来才明白，所有编程语言，都有设计模式这一说法，读《JavaScript 中的设计模式》这本书，给了我很大启发。</p>\n<h3 id=\"关于es6的继承\"><a class=\"markdownIt-Anchor\" href=\"#关于es6的继承\">#</a> 关于 ES6 的继承：</h3>\n<blockquote>\n<p>​\t\t子类必须在 <code>constructor</code>  方法中调用 <code>super</code>  方法，否则新建实例时会报错。这是因为子类没有自己的 <code>this</code>  对象，而是继承父类的 <code>this</code>  对象，然后对其进行加工。如果不调用 <code>super</code>  方法，子类就得不到 <code>this</code>  对象。</p>\n</blockquote>\n<blockquote>\n<p>ES5 的继承，实质是先创造子类的实例对象 <code>this</code> ，然后再将父类的方法添加到 <code>this</code>  上面（ <code>Parent.apply(this)</code> ）。</p>\n<p>ES6 的继承机制完全不同，实质是先创造父类的实例对象 <code>this</code> （所以必须先调用 <code>super</code>  方法），然后再用子类的构造函数修改 <code>this</code> 。</p>\n<p>如果子类没有定义 <code>constructor</code>  方法，这个方法会被默认添加，代码如下。也就是说，不管有没有显式定义，任何一个子类都有 <code>constructor</code>  方法。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 等同于</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ColorPoint</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Point</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">...args</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<h2 id=\"设计模式的六大原则\"><a class=\"markdownIt-Anchor\" href=\"#设计模式的六大原则\">#</a> 设计模式的六大原则</h2>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTY3Mjc5ODQ5NTk3NTY2OTg0\">单一职责原则（Single Responsibility Principle）</span>；</li>\n</ul>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC50ZW5jZW50LmNvbS9kZXZlbG9wZXIvYXJ0aWNsZS8xODM2NzUz\">开闭原则（Open Closed Principle）</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNjg1NzQ2NDE=\">里氏替换原则（Liskov Substitution Principle)</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vSVRQb3dlci9wLzE0ODczMDcyLmh0bWw=\">迪米特法则（Law of Demeter），又叫 “最少知道法则”</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDU5NDA0MS9hcnRpY2xlL2RldGFpbHMvMTEyNzI3MjI0\">接口隔离原则（Interface Segregation Principle）</span>；</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9jM2NlNjc2MjI1N2M=\">依赖倒置原则（Dependence Inversion Principle）</span>。</li>\n</ul>\n<img data-src=\"https://gitee.com/jilinJL/my-pictures/raw/master/img/202211172227388.png\" alt=\"image-20221115144952471\" style=\"zoom: 80%;\" />\n<hr>\n<h2 id=\"创造型设计模式5\"><a class=\"markdownIt-Anchor\" href=\"#创造型设计模式5\">#</a> 创造型设计模式（5）</h2>\n<h3 id=\"1工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#1工厂模式\">#</a> 1. 工厂模式</h3>\n<p>​\t\t工厂模式是比较常用的设计模式之一，那么什么叫模式呢？简单来说，就是你需要什么东西，不直接使用 new 的方法生成实例，而是通过工厂加工再生成实例。</p>\n<p>​\t\t比如我们现在需要生产三种形状，分别为：圆形，正方形，三角形。我们可以这样做：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个圆形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个三角形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">  draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个正方形&quot;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myCircle = <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();</span><br><span class=\"line\">myCircle.<span class=\"title function_\">draw</span>(); <span class=\"comment\">//画了一个圆形</span></span><br></pre></td></tr></table></figure>\n<p>​\t\t但是这样的话，每次我需要一个圆形，都要自己 new 一个 Circle，如果需要其他形状，又要 new 一个其他的构造类，下面我们来建一个工厂，负责生产不同的形状。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">shapeFactory</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">switch</span> (shapeType) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Circle&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();\t<span class=\"comment\">//生产new圆</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Triangle&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      <span class=\"keyword\">case</span> <span class=\"string\">&quot;Square&quot;</span>: &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Square</span>();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> shapefactory = <span class=\"keyword\">new</span> <span class=\"title function_\">shapeFactory</span>();</span><br><span class=\"line\"><span class=\"keyword\">const</span> myCircle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;Circle&quot;</span>);\t</span><br><span class=\"line\"><span class=\"keyword\">const</span> myTriangle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&quot;Triangle&quot;</span>);</span><br><span class=\"line\">myCircle.<span class=\"title function_\">draw</span>()\t\t<span class=\"comment\">//画了一个圆形</span></span><br><span class=\"line\">myTriangle.<span class=\"title function_\">draw</span>()\t<span class=\"comment\">//画了一个三角形</span></span><br></pre></td></tr></table></figure>\n<p><strong>工厂模式的优势</strong>：使用工厂模式的好处也是显而易见的，比如实例的生产比较复杂，或者说生成实例后还需要额外加工，这个时候工厂给了我们一个统一的出入口，也方便了日后对这个实例的修改。比如你要修改产出是一个单例的时候，就不需要在所有类中修改，而只需要在工厂出口修改即可。</p>\n<h3 id=\"2抽象工厂模式\"><a class=\"markdownIt-Anchor\" href=\"#2抽象工厂模式\">#</a> 2. 抽象工厂模式</h3>\n<p>​\t\t抽象工厂？这名字确实挺抽象，因为一般来讲一个工厂只负责加工一个组件，而你的产品需要很多组件合成组装，因此你需要很多生产不同组件的工厂，那么如何管理这些工厂呢，那就用生产工厂的工厂！</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  <span class=\"comment\">//形状有哪些</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Circle</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个圆形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Triangle</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个三角形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Square</span> &#123;</span><br><span class=\"line\">    draw = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;画了一个正方形&quot;</span>);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//颜色有哪些</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Blue</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充蓝色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Red</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充红色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">Yellow</span> &#123;</span><br><span class=\"line\">    fill = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;填充黄色&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//先拿到上文的形状工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">ShapeFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getShape</span>(<span class=\"params\">shapeType</span>) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">switch</span> (shapeType) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Circle&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Circle</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Triangle&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Triangle</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;Square&quot;</span>: &#123;</span><br><span class=\"line\">          <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Square</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"comment\">//再创建一个颜色工厂负责上色</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">ColorFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getColor</span>(<span class=\"params\">colorType</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (colorType) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Blue&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Blue</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Green&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Green</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Yellow&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Yellow</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//抽象工厂，负责管理下面所有工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">class</span> <span class=\"title class_\">FatherFactory</span> &#123;</span><br><span class=\"line\">    <span class=\"title function_\">getFactory</span>(<span class=\"params\">choice</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (choice) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Color&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ColorFactory</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"string\">&#x27;Shape&#x27;</span>:&#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ShapeFactory</span>();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">//现在开始生产</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> fatherfactory = <span class=\"keyword\">new</span> <span class=\"title class_\">FatherFactory</span>()</span><br><span class=\"line\">  <span class=\"keyword\">const</span> colorfactory = fatherfactory.<span class=\"title function_\">getFactory</span>(<span class=\"string\">&#x27;Color&#x27;</span>)    <span class=\"comment\">//生产颜色工厂</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> shapefactory = fatherfactory.<span class=\"title function_\">getFactory</span>(<span class=\"string\">&#x27;Shape&#x27;</span>)    <span class=\"comment\">//生产形状工厂</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> myCircle = shapefactory.<span class=\"title function_\">getShape</span>(<span class=\"string\">&#x27;Circle&#x27;</span>)</span><br><span class=\"line\">  myCircle.<span class=\"title function_\">draw</span>()  <span class=\"comment\">// &quot;画了一个圆形&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> blue = colorfactory.<span class=\"title function_\">getColor</span>(<span class=\"string\">&#x27;Blue&#x27;</span>)</span><br><span class=\"line\">  blue.<span class=\"title function_\">fill</span>();     <span class=\"comment\">// &quot;填充蓝色&quot;</span></span><br></pre></td></tr></table></figure>\n<p><strong>说说好处</strong>：和工厂模式类似，抽象工厂模式方便了对各种工厂的管理。</p>\n<h3 id=\"3单例模式\"><a class=\"markdownIt-Anchor\" href=\"#3单例模式\">#</a> 3. 单例模式</h3>\n<p>​\t\t顾名思义，单例模式就是每个实例只生产一次。单例模式又分为两种，一种叫<strong>懒汉式</strong>，一种叫<strong>饿汉式</strong>。区别在于，懒汉式是使用的时候才初始化，饿汉式是先初始化，需要用的时候直接给。<br>\n​\t\t值得注意的是懒汉式写法在 java 中可能会对线程安全有影响，但是 JS 是单线程的，不需要考虑线程安全哈哈哈，所以优先考虑懒汉式。</p>\n<p>TODO…</p>\n<h2 id=\"结构型设计模式8\"><a class=\"markdownIt-Anchor\" href=\"#结构型设计模式8\">#</a> 结构型设计模式（8）</h2>\n<h2 id=\"行为型设计模式12\"><a class=\"markdownIt-Anchor\" href=\"#行为型设计模式12\">#</a> 行为型设计模式（12）</h2>\n",
            "tags": [
                "js"
            ]
        },
        {
            "id": "https://jilinjl.github.io/project/js/es6/ES6-%E5%85%9C%E5%85%9C%E8%BD%AC%E8%BD%AC%E8%BF%98%E6%98%AF%E4%BD%A0/",
            "url": "https://jilinjl.github.io/project/js/es6/ES6-%E5%85%9C%E5%85%9C%E8%BD%AC%E8%BD%AC%E8%BF%98%E6%98%AF%E4%BD%A0/",
            "title": "ES6",
            "date_published": "2022-11-17T14:56:14.192Z",
            "content_html": "<h1 id=\"ecma-script-6\"><a class=\"markdownIt-Anchor\" href=\"#ecma-script-6\">#</a> ECMA script 6</h1>\n<hr>\n<p>其实是 ES6➕之后的版本统称 ES6</p>\n<hr>\t\n<h2 id=\"1var-let-和-const\"><a class=\"markdownIt-Anchor\" href=\"#1var-let-和-const\">#</a> 1.var , let 和 const</h2>\n<p><strong>var 声明变量会在全局 window 下，let ,const 只能在块级作用域有效（if,for,while）</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// var可以重复声明，let ，const 不行</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// var存在变量提升</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);  <span class=\"comment\">//undefined  不会报错</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;xs&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let 不影响作用域链的值查找</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> name = <span class=\"string\">&#x27;xs&#x27;</span>;</span><br><span class=\"line\">    f=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(name);\t<span class=\"comment\">//xs 在f函数块级没找到，于是往上一级找到name</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"title function_\">fn</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//注意！ for循环内如果是 let 声明的循环变量，则会生成n个块级作用域</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>, i &lt; <span class=\"number\">5</span>,i ++) <span class=\"comment\">//0，1，2，3，4</span></span><br><span class=\"line\"><span class=\"comment\">//如果是 var 声明的循环变量 ，则会在最后一次循环后覆盖前面值</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>, i &lt; <span class=\"number\">5</span>,i ++) <span class=\"comment\">//5,5,5,5,5</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><strong>const 声明变量不能修改，必须赋初始值</strong></p>\n<h2 id=\"2解构赋值\"><a class=\"markdownIt-Anchor\" href=\"#2解构赋值\">#</a> 2. 解构赋值</h2>\n<p>​\t1.\t数组解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">F4</span> = [<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>,<span class=\"string\">&#x27;four&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> [a,b,c,d] = <span class=\"variable constant_\">F4</span>;</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(b); <span class=\"comment\">// two</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>\n<p>​\t对象解构</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> person = &#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&#x27;xs&#x27;</span>,</span><br><span class=\"line\">    <span class=\"attr\">age</span>: <span class=\"number\">18</span>,</span><br><span class=\"line\">    <span class=\"attr\">run</span>: <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">       <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;running..&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解构</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;name,age,run&#125; = person;</span><br><span class=\"line\"><span class=\"title function_\">run</span>();</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"3模板字符串\"><a class=\"markdownIt-Anchor\" href=\"#3模板字符串\">#</a> 3. 模板字符串</h2>\n<p>使用 <strong>`` 反引号</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1. 直接可以使用换行符</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`第一行</span></span><br><span class=\"line\"><span class=\"string\">\t\t  第二行`</span></span><br><span class=\"line\"><span class=\"comment\">//2. 使用 $&#123;&#125; 字符串内使用变量</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> name = <span class=\"string\">&#x27;lhp&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str = <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>是我的名字`</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4箭头函数\"><a class=\"markdownIt-Anchor\" href=\"#4箭头函数\">#</a> 4. 箭头函数</h2>\n<p><mark>关于箭头函数的 this</mark> <strong>箭头函数的 this 无法改变（call,apply…），始终指向函数声明是的作用域下的 this</strong></p>\n<p><mark>constructor</mark> <strong>箭头函数 不能作为构造函数去创建实例化对象！</strong></p>\n<p><mark>arguments</mark> <strong>箭头函数不能用 arguments 获取参数</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//声明普通函数</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> <span class=\"title function_\">sum</span>=(<span class=\"params\">a,b</span>)=&gt;&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a+b;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//关于箭头函数的this   箭头函数的this无法改变（call,apply...），始终指向函数声明是的作用域下的this  ****</span></span><br><span class=\"line\"><span class=\"comment\">//补充： 定时器函数内的this指向winodw 可以在定时器前使用 const _this = this 来保存this并使用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"原型和原型链\"><a class=\"markdownIt-Anchor\" href=\"#原型和原型链\">#</a> <em>原型和原型链</em>：</h3>\n<p>Object; Function; Array; Map; Set;JS 中顶级对象是 Object，<strong>Object.prototype: 最顶层的原型对象</strong></p>\n<img data-src=\"C:\\Users\\jilin\\AppData\\Roaming\\Typora\\typora-user-images\\image-20221112175839161.png\" alt=\"image-20221112175839161\"  />\n<h5 id=\"1构造函数\"><a class=\"markdownIt-Anchor\" href=\"#1构造函数\">#</a> 1. 构造函数：</h5>\n<blockquote>\n<p>1. 构造函数首字母必须大写。<br>\n2. 内部使用 this 对象，来指向要生成的对象实例。<br>\n3. 使用 new 来调用构造函数，返回对象实例。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\"></span>)&#123;    <span class=\"comment\">//构造函数</span></span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = <span class=\"string\">&#x27;keith&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> boy = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"2构造函数的缺点\"><a class=\"markdownIt-Anchor\" href=\"#2构造函数的缺点\">#</a> 2. 构造函数的缺点</h5>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,height</span>)&#123;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=name;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">height</span>=height;</span><br><span class=\"line\"> <span class=\"variable language_\">this</span>.<span class=\"property\">hobby</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\"> <span class=\"keyword\">return</span> <span class=\"string\">&#x27;watching movies&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 这里的boy 和 girl 出自同一个构造函数Person 但是hobby却不全等</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> boy=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;keith&#x27;</span>,<span class=\"number\">180</span>);</span><br><span class=\"line\"> <span class=\"keyword\">var</span> girl=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;rascal&#x27;</span>,<span class=\"number\">153</span>);</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(girl.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;rascal&#x27;</span></span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">hobby</span>===girl.<span class=\"property\">hobby</span>); <span class=\"comment\">//false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//**每当使用new来调用构造函数放回一个对象实例的时候，都会创建一个hobby方法。这既没有必要，又浪费资源**</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"3prototype属性\"><a class=\"markdownIt-Anchor\" href=\"#3prototype属性\">#</a> 3.prototype 属性</h5>\n<p>js 中每个数据类型都是对象（除了 null 和 undefined），而每个对象都继承自另外一个对象，后者称为 “原型”（prototype）对象，只有 null 除外，它没有自己的原型对象。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Person</span>(<span class=\"params\">name,height</span>)&#123;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">name</span>=name;</span><br><span class=\"line\"><span class=\"variable language_\">this</span>.<span class=\"property\">height</span>=height;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">hobby</span>=<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;      <span class=\"comment\">//把hobby方法放在原型对象上，对象实例可以继承</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> <span class=\"string\">&#x27;watching movies&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> boy=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;keith&#x27;</span>,<span class=\"number\">180</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> girl=<span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;rascal&#x27;</span>,<span class=\"number\">153</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;keith&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(girl.<span class=\"property\">name</span>); <span class=\"comment\">//&#x27;rascal&#x27;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(boy.<span class=\"property\">hobby</span>===girl.<span class=\"property\">hobby</span>); <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n<p>也就是说，当某个对象实例没有该属性和方法时，就会到<strong>原型对象</strong>上去查找。如果实例对象自身有某个属性或方法，就不会去原型对象上查找。</p>\n<p><mark><strong>重点：</strong></mark></p>\n<ol>\n<li>\n<blockquote>\n<p><strong>原型对象的作用，就是定义所有对象实例所共享的属性和方法。</strong></p>\n</blockquote>\n</li>\n<li>\n<blockquote>\n<p><strong>prototype，对于构造函数来说，它是一个属性；对于对象实例来说，它是一个 (<em>proto</em>) 原型对象。</strong></p>\n</blockquote>\n</li>\n</ol>\n<h5 id=\"4原型链prototype-chains\"><a class=\"markdownIt-Anchor\" href=\"#4原型链prototype-chains\">#</a> 4. 原型链（prototype chains）</h5>\n<p><code>由于原型对象本身对于对象实例来说也是对象，它也有自己的原型，所以形成了一条原型链（prototype chain）。</code> <br>\n <code>比如，a对象是b对象的原型，b对象是c对象的原型，以此类推_proto_。</code></p>\n<p>​\t  定义一个数组 arr，数组里面有三个元素。我们并没有给数组添加任何属性和方法，可是却在调用 **length，join ()，valueOf ()** 时，却不会报错。</p>\n<p><strong>length</strong> 属性是继承自 Array.prototype 的，属于原型对象上的一个属性。join 方法也是继承自 Array.prototype 的，属于原型对象上的一个方法。这两个方法是所有数组所共享的。当实例对象上没有这个 length 属性时，就会去原型对象查找。</p>\n<p><strong>valueOf</strong> 方法是继承自 Object.prototype 的。首先，arr 数组是没有 valueOf 方法的，所以就到原型对象 Array.prototype 查找。然后，发现 Array.prototype 对象上没有 valueOf 方法。最后，再到它的原型对象 Object.prototype 查找。</p>\n<h5 id=\"5constructor\"><a class=\"markdownIt-Anchor\" href=\"#5constructor\">#</a> 5.constructor</h5>\n<p>​\t<strong>原型 (prototype) 对象有一个 constructor 属性，默认指向该对象所在的构造函数。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"> <span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\"> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>); <span class=\"comment\">//A()</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===A.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">constructor</span>);<span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"comment\">//a是构造函数A的实例对象，但是a自身没有contructor属性，该属性其实是读取原型链上面的</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">A</span>(<span class=\"params\"></span>)&#123;&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"keyword\">new</span> <span class=\"title function_\">A</span>();</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===A) <span class=\"comment\">//true</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(a.<span class=\"property\">constructor</span>===<span class=\"title class_\">Array</span>) <span class=\"comment\">//false</span></span><br><span class=\"line\"><span class=\"comment\">//判断实例对象a的构造函数是A而不是Array</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"6instanceof\"><a class=\"markdownIt-Anchor\" href=\"#6instanceof\">#</a> 6.instanceof</h5>\n<ol>\n<li>instanceof 运算符返回一个布尔值，表示指定对象是否为某个构造函数的实例。</li>\n<li>因为 instanceof 对整个原型链上的对象都有效，所以同一个实例对象，可能会对多个构造函数都返回 true。</li>\n<li>instanceof 对象只能用于复杂数据类型（数组，对象等），不能用于简单数据类型（布尔值，数字，字符串等）。</li>\n</ol>\n<h5 id=\"7typeof\"><a class=\"markdownIt-Anchor\" href=\"#7typeof\">#</a> 7.typeof</h5>\n<p>​\t判断类型方法，当碰到 <code>Array</code> 、 <code>Function</code>  等类型时均返回一个 <code>Object</code> <br>\n 所以可以用 <code>Object.prototype.toString.call(obj)</code>  方法来识别对象类型。<br>\n返回一个 &quot;[object Type]&quot;</p>\n<h2 id=\"5rest参数\"><a class=\"markdownIt-Anchor\" href=\"#5rest参数\">#</a> 5.rest 参数 ——…</h2>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn</span> = (<span class=\"params\">...args</span>) =&gt; &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(args)    <span class=\"comment\">// [&#x27;one&#x27;,&#x27;two&#x27;,&#x27;three&#x27;] 输出一个数组</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"title function_\">fn</span>(<span class=\"string\">&#x27;one&#x27;</span>,<span class=\"string\">&#x27;two&#x27;</span>,<span class=\"string\">&#x27;three&#x27;</span>)；</span><br><span class=\"line\"><span class=\"comment\">//-----------------</span></span><br><span class=\"line\"><span class=\"title function_\">fn</span>(...arr)  <span class=\"comment\">//表示把arr数组中的每一项作为参数传入fn </span></span><br></pre></td></tr></table></figure>\n<p>** 注意：利用 …arr 来复制数组是浅拷贝，无法复制原数组内的方法… **</p>\n<h2 id=\"6symbol\"><a class=\"markdownIt-Anchor\" href=\"#6symbol\">#</a> 6.Symbol</h2>\n<p>​\tsymbol 是唯一的标识，可是使属性唯一</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> s =<span class=\"title class_\">Symbol</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> s2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">//-----</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a1 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">let</span> a2 = <span class=\"title class_\">Symbol</span>.<span class=\"title function_\">for</span>(<span class=\"string\">&#x27;a&#x27;</span>);</span><br><span class=\"line\">a1 === a2  <span class=\"comment\">// true</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a1  <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">typeof</span> a2  <span class=\"comment\">// &quot;symbol&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a3= <span class=\"title class_\">Symbol</span>(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\">a1 === a3      <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>USONB   undefined String Object Number Null Boolean</p>\n<h2 id=\"7迭代器\"><a class=\"markdownIt-Anchor\" href=\"#7迭代器\">#</a> 7. 迭代器</h2>\n<p>​\tSymbol.iterator 有属性 next ()</p>\n<blockquote>\n<p>next () 方法返回的迭代器对象 IteratorResult 包含两个属性：done 和 value。done 是一个布 尔值，表示是否还可以再次调用 next () 取得下一个值；value 包含可迭代对象的下一个值（done 为 false），或者 undefined（done 为 true）。done: true 状态称为 “耗尽”</p>\n</blockquote>\n<p>​\tfor…in…  取下标</p>\n<p>​\tfor…of…  取 值</p>\n<h5 id=\"手写迭代器遍历一个对象\"><a class=\"markdownIt-Anchor\" href=\"#手写迭代器遍历一个对象\">#</a> <mark>手写迭代器遍历一个对象：</mark></h5>\n<p><em>需求</em>：<em>遍历对象 pencilCase 中的所有 pens</em></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> pencilCase=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小天才&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pens</span>: [<span class=\"string\">&#x27;钢笔&#x27;</span>,<span class=\"string\">&#x27;圆珠笔&#x27;</span>,<span class=\"string\">&#x27;铅笔&#x27;</span>,<span class=\"string\">&#x27;橡皮擦&#x27;</span>]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> pencilCase)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &quot;Uncaught TypeError: pencilCase is not iterable&quot;</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//正确做法，利用迭代器的next()机制</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> pencilCase=&#123;</span><br><span class=\"line\">    <span class=\"attr\">name</span>: <span class=\"string\">&quot;小天才&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">pens</span>: [<span class=\"string\">&#x27;钢笔&#x27;</span>,<span class=\"string\">&#x27;圆珠笔&#x27;</span>,<span class=\"string\">&#x27;铅笔&#x27;</span>,<span class=\"string\">&#x27;橡皮擦&#x27;</span>],</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">//注意迭代器写法</span></span><br><span class=\"line\">    [<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]()&#123; <span class=\"comment\">//中括号等于重写了这个属性</span></span><br><span class=\"line\">        <span class=\"keyword\">let</span> index = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">            <span class=\"attr\">next</span>: <span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">                <span class=\"comment\">//注意 由于是箭头函数 这里的this指向pencilCase</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(index&lt;<span class=\"variable language_\">this</span>.<span class=\"property\">pens</span>.<span class=\"property\">length</span>)&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">const</span> result=&#123;<span class=\"attr\">value</span>: <span class=\"variable language_\">this</span>.<span class=\"property\">pens</span>[index],<span class=\"attr\">done</span>: <span class=\"literal\">false</span>&#125;;</span><br><span class=\"line\">                    index++;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> result</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> &#123;<span class=\"attr\">value</span>: <span class=\"literal\">undefined</span>,<span class=\"attr\">done</span>: <span class=\"literal\">true</span>&#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> pencilCase)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"8生成器\"><a class=\"markdownIt-Anchor\" href=\"#8生成器\">#</a> 8. 生成器  *</h2>\n<p>​\t\t生成器不能用箭头函数创建</p>\n<p>​\t\t<strong>生成异步函数队列，每一次调用 next () 执行一个代码块</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">     \t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;参数&#x27;</span>)</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第一个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;222&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第二个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;333&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;这是第三个断点&#x27;</span></span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;444&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">gen</span>(<span class=\"string\">&#x27;参数&#x27;</span>) <span class=\"comment\">//可以传参</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">//参数 111 &#123;value:&#x27;这是第一个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 222 &#123;value:&#x27;这是第二个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 333 &#123;value:&#x27;这是第三个断点&#x27;,done: false&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// 444 &#123;value:undefined, done: true&#125;</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>()) <span class=\"comment\">// value:undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>每次  <em>iterator.next (‘参数’)</em> 传入的参数</p>\n<p>将作为上一次断点的返回结果</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title function_\">gen</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">let</span> one = <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point1&#x27;</span>;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(one);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point2&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"string\">&#x27;point3&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title function_\">gen</span>();</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()  <span class=\"comment\">//第一个next用于启动生成器</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(iterator.<span class=\"title function_\">next</span>(<span class=\"string\">&#x27;将作为第一个断点返回值的参数&#x27;</span>)) <span class=\"comment\">//将作为第一个断点返回值的参数  &#123;value: &#x27;point2&#x27;, done: false&#125;</span></span><br></pre></td></tr></table></figure>\n<p><strong>生成器可以解决</strong> <mark>回调地狱</mark> 问题</p>\n<p>回调： 1s 后输出 111， 1.5s 后输出 222， 2s 后输出 333</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">111</span>)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">222</span>)</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">333</span>)</span><br><span class=\"line\">        &#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1500</span>)</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>使用生成器</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn1</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;111&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn2</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;222&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">1500</span>)</span><br><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"title function_\">fn3</span> =(<span class=\"params\"></span>)=&gt; <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;333&#x27;</span>);</span><br><span class=\"line\">    iterator.<span class=\"title function_\">next</span>()</span><br><span class=\"line\">&#125;,<span class=\"number\">2000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> *<span class=\"title class_\">FnList</span>()&#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn1</span>()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn2</span>()</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> <span class=\"title function_\">fn3</span>()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> iterator = <span class=\"title class_\">FnList</span>()</span><br><span class=\"line\">iterator.<span class=\"title function_\">next</span>()\t\t<span class=\"comment\">// 111   222    333</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"9promise\"><a class=\"markdownIt-Anchor\" href=\"#9promise\">#</a> 9.Promise</h2>\n<p>​\t<em>异步编程的一种方案，解决了回调地狱的问题，是一种链式调动的方式</em></p>\n<p>原生 promise, 状态的改变是通过 resolve () 和 reject () 函数来实现的，它的原型上定义了一个 then 方法，使用这个 then 方法可以为两个状态的改变注册回调函数</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> myPromise = <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise本身直接运行&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//模拟一个异步</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> data = <span class=\"string\">&#x27;用户数据&#x27;</span></span><br><span class=\"line\">         <span class=\"title function_\">resolve</span>(data)</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">myPromise.<span class=\"title function_\">then</span>(<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;成功&#x27;</span>)</span><br><span class=\"line\">&#125;,<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;获取数据失败&#x27;</span>)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p><strong>catch</strong> 方法，实际上是<strong> then</strong> 方法的语法糖，catch 会停止之后的所有 then。</p>\n<h2 id=\"10setmap\"><a class=\"markdownIt-Anchor\" href=\"#10setmap\">#</a> 10.Set&amp;Map</h2>\n<h3 id=\"1set\"><a class=\"markdownIt-Anchor\" href=\"#1set\">#</a> 1.Set</h3>\n<p>set 集合内的值是<strong>不重复</strong>的</p>\n<p>add (value) 添加； delete (value) 删除； has (value) 查看集合内有无该值，返回一个布尔值 clear ()； 清除集合</p>\n<p>注意配合 <mark>扩展运算符</mark>  （…）使用</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = <span class=\"title class_\">Array</span>.<span class=\"title function_\">from</span>(mySet)  <span class=\"comment\">//把集合转为数组 </span></span><br><span class=\"line\"><span class=\"comment\">//可以用 for ... of 遍历Set</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> set = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"string\">&#x27;green&#x27;</span>, <span class=\"string\">&#x27;blue&#x27;</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">keys</span>()) &#123;  <span class=\"comment\">//遍历键</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">values</span>()) &#123;  <span class=\"comment\">//遍历值</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// red</span></span><br><span class=\"line\"><span class=\"comment\">// green</span></span><br><span class=\"line\"><span class=\"comment\">// blue</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> item <span class=\"keyword\">of</span> set.<span class=\"title function_\">entries</span>()) &#123;  <span class=\"comment\">//遍历键值对</span></span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// [&quot;red&quot;, &quot;red&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;green&quot;, &quot;green&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// [&quot;blue&quot;, &quot;blue&quot;]</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>利用 filter 实现各种过滤</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>]);</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([<span class=\"number\">4</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>]);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 并集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> union = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a, ...b]);</span><br><span class=\"line\"><span class=\"comment\">// Set &#123;1, 2, 3, 4&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 交集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> intersect = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> b.<span class=\"title function_\">has</span>(x)));</span><br><span class=\"line\"><span class=\"comment\">// set &#123;2, 3&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 差集</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> difference = <span class=\"keyword\">new</span> <span class=\"title class_\">Set</span>([...a].<span class=\"title function_\">filter</span>(<span class=\"function\"><span class=\"params\">x</span> =&gt;</span> !b.<span class=\"title function_\">has</span>(x)));</span><br><span class=\"line\"><span class=\"comment\">// Set &#123;1&#125;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2map\"><a class=\"markdownIt-Anchor\" href=\"#2map\">#</a> 2.Map</h3>\n<p>​\tMap 和 Object 区别 ： Map 的键值对中，任何值都可以作为键</p>\n<p>同 Set ，Map 也能用 **for…of ** 遍历，并且也可以 Map.keys () 遍历键 Map.values () 遍历值…</p>\n<h2 id=\"11clas类\"><a class=\"markdownIt-Anchor\" href=\"#11clas类\">#</a> 11.Clas 类</h2>\n<h3 id=\"1静态成员-原生函数对象内无法加静态方法\"><a class=\"markdownIt-Anchor\" href=\"#1静态成员-原生函数对象内无法加静态方法\">#</a> 1. 静态成员 （原生函数对象内无法加静态方法）</h3>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span>&#123;</span><br><span class=\"line\">    <span class=\"title function_\">constructor</span>(<span class=\"params\">name,age</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">        <span class=\"variable language_\">this</span>.<span class=\"property\">age</span>= age;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"title function_\">say</span>(<span class=\"params\">name</span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">`我叫<span class=\"subst\">$&#123;name&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">let</span> ming = <span class=\"keyword\">new</span> <span class=\"title class_\">Person</span>(<span class=\"string\">&#x27;ming&#x27;</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(ming)  <span class=\"comment\">//Person &#123; name: &#x27;ming&#x27;, age: 20 &#125;</span></span><br><span class=\"line\"><span class=\"title class_\">Person</span>.<span class=\"title function_\">say</span>(<span class=\"string\">&#x27;ming&#x27;</span>);  <span class=\"comment\">//静态方法 只能类自身用</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2继承原生继承是给-fnprototype加属性或方法\"><a class=\"markdownIt-Anchor\" href=\"#2继承原生继承是给-fnprototype加属性或方法\">#</a> 2. 继承（原生继承是给 fn.prototype 加属性或方法 ）</h3>\n<p>​\t<strong>为什么构造函数的方法不直接写进构造函数，而是写入其原型对象？</strong></p>\n<blockquote>\n<p>​\t\t因为写进构造函数，每次创建一个实例对象都会创建那个方法，白白占用内存，写入其原型对象中，实例对象就可以直接调用。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Person</span> &#123;</span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">name</span> = name;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">age</span> = age;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"title function_\">walk</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;I am walking&quot;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Stu</span> <span class=\"keyword\">extends</span> <span class=\"title class_ inherited__\">Person</span> &#123;   <span class=\"comment\">// extends继承</span></span><br><span class=\"line\">  <span class=\"title function_\">constructor</span>(<span class=\"params\">name, age, grade, major</span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">super</span>(name, age);       <span class=\"comment\">// super...哈</span></span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">grade</span> = grade;</span><br><span class=\"line\">    <span class=\"variable language_\">this</span>.<span class=\"property\">major</span> = major;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> xiaoming = <span class=\"keyword\">new</span> <span class=\"title class_\">Stu</span>(<span class=\"string\">&quot;小明&quot;</span>, <span class=\"number\">20</span>, <span class=\"number\">3</span>, <span class=\"string\">&quot;软件工程&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(xiaoming);  <span class=\"comment\">//Stu &#123; name: &#x27;小明&#x27;, age: 20, grade: 3, major: &#x27;软件工程&#x27; &#125;</span></span><br><span class=\"line\">xiaoming.<span class=\"title function_\">walk</span>();        <span class=\"comment\">// I am walking</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3多态子类对父类方法重写\"><a class=\"markdownIt-Anchor\" href=\"#3多态子类对父类方法重写\">#</a> 3. 多态，子类对父类方法重写</h3>\n<h3 id=\"4set和get类似java\"><a class=\"markdownIt-Anchor\" href=\"#4set和get类似java\">#</a> 4.set 和 get（类似 java）</h3>\n<h2 id=\"12类型转换\"><a class=\"markdownIt-Anchor\" href=\"#12类型转换\">#</a> 12. 类型转换</h2>\n<img data-src=\"https://lanhaooss.oss-cn-shenzhen.aliyuncs.com/images/convert-table.png\" alt=\"convert-table\" style=\"zoom:50%;\" />\n<h3 id=\"1减-乘-除\"><a class=\"markdownIt-Anchor\" href=\"#1减-乘-除\">#</a> 1. 减、乘、除</h3>\n<p><strong>我们在对各种非 <code>Number</code>  类型运用数学运算符 ( <code>- * /</code> ) 时，会先将非 <code>Number</code>  类型转换为 <code>Number</code>  类型。</strong></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span> == <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"number\">0</span> == <span class=\"literal\">null</span></span><br><span class=\"line\"><span class=\"number\">1</span> * <span class=\"literal\">undefined</span> == <span class=\"title class_\">NaN</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2加法\"><a class=\"markdownIt-Anchor\" href=\"#2加法\">#</a> 2 加法</h3>\n<ul>\n<li>当一侧为 <code>String</code>  类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li>\n<li>当一侧为 <code>Number</code>  类型，另一侧为原始类型，则将原始类型转换为 <code>Number</code>  类型。</li>\n<li>当一侧为 <code>Number</code>  类型，另一侧为引用类型，将引用类型和 <code>Number</code>  类型转换成字符串后拼接。</li>\n</ul>\n<h3 id=\"3逻辑运算\"><a class=\"markdownIt-Anchor\" href=\"#3逻辑运算\">#</a> 3. 逻辑运算</h3>\n<p>​\t\t<strong>当我们使用  <code>if</code>   <code>while</code>   <code>for</code>  语句时，我们期望表达式是一个 <code>Boolean</code> ，所以一定伴随着隐式类型转换。而这里面又分为两种情况：</strong></p>\n<h4 id=\"1单个变量ifnum-while-index\"><a class=\"markdownIt-Anchor\" href=\"#1单个变量ifnum-while-index\">#</a> 1. 单个变量（if (num)、while ( index )…）</h4>\n<h4 id=\"2-使用-比较\"><a class=\"markdownIt-Anchor\" href=\"#2-使用-比较\">#</a> 2. 使用 == 比较</h4>\n<ul>\n<li>\n<p>规则 1： <code>NaN</code>  和其他任何类型比较永远返回 <code>false</code> （包括和他自己\b）。</p>\n</li>\n<li>\n<p>规则 2：Boolean 和其他任何类型比较，Boolean 首先被转换为 Number 类型（0 / 1）。</p>\n</li>\n<li>\n<p>规则 3： <code>String</code>  和 <code>Number</code>  比较，先将 <code>String</code>  转换为 <code>Number</code>  类型。</p>\n</li>\n<li>\n<p>规则 4： <code>null == undefined</code>  比较结果是 <code>true</code> ，除此之外， <code>null</code> 、 <code>undefined</code>  和其他任何结果的比较值都为 <code>false</code> 。</p>\n</li>\n<li>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">false</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>code￼<span class=\"token number\">24</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"14asycn-await\"><a class=\"markdownIt-Anchor\" href=\"#14asycn-await\">#</a> 14.asycn 、 await</h2>\n<p>ES8 新特性</p>\n<p><strong>asycn 函数</strong>，返回一个 Promise 类型的对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">fn</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//resolve(&#x27;数据成功&#x27;)</span></span><br><span class=\"line\">        <span class=\"title function_\">reject</span>(<span class=\"string\">&#x27;出错了&#x27;</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">const</span> f = <span class=\"title function_\">fn</span>()</span><br><span class=\"line\">f.<span class=\"title function_\">then</span>(<span class=\"function\"><span class=\"params\">value</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(value);</span><br><span class=\"line\">&#125;,<span class=\"function\"><span class=\"params\">reason</span> =&gt;</span>&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">warn</span>(reason);</span><br><span class=\"line\">&#125;)\t\t<span class=\"comment\">//状态：失败 ， 内容：出错了</span></span><br></pre></td></tr></table></figure>\n<p><strong>await</strong> 必须写在 async 函数中</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> result = <span class=\"keyword\">await</span> $.<span class=\"title function_\">send</span>(<span class=\"string\">&#x27;xxx&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>await 获取 async 异步的结果</p>\n",
            "tags": [
                "es6"
            ]
        },
        {
            "id": "https://jilinjl.github.io/project/demo/",
            "url": "https://jilinjl.github.io/project/demo/",
            "title": "demo",
            "date_published": "2022-11-17T08:00:57.000Z",
            "content_html": "<p>hello~</p>\n",
            "tags": [
                "hello hexo!"
            ]
        }
    ]
}